<?xml version="1.0"?>
<doc>
    <assembly>
        <name>JavApi</name>
    </assembly>
    <members>
        <member name="M:biz.ritter.awt.forms.DialogFormsPeer.setTitle(System.String)">
            <summary>
            Set the title of frame
            </summary>
            <param name="newTitle">title</param>
        </member>
        <member name="M:biz.ritter.awt.forms.DialogFormsPeer.setVisible(System.Boolean)">
            <summary>
            Display or hides this dialog and contained child GUI element.
            </summary>
            <param name="showMe">true if to display, false if to hide</param>
        </member>
        <member name="M:biz.ritter.awt.forms.WindowFormsPeer.setVisible(System.Boolean)">
            <summary>
            Display or hides this frame and contained child GUI element.
            </summary>
            <param name="showMe">true if to display, false if to hide</param>
        </member>
        <member name="M:biz.ritter.awt.forms.WindowFormsPeer.show">
            <summary>
            Show the window - obsoleted by setVisisble()
            </summary>
        </member>
        <member name="T:biz.ritter.awt.forms.FormsToolkit">
            <summary>
            FormsToolkit is the AWT implementation based on Windows Forms
            </summary>
        </member>
        <member name="M:biz.ritter.awt.forms.FormsToolkit.createFrame(biz.ritter.javapi.awt.Frame)">
            <summary>
            Create a FramePeer object
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:biz.ritter.awt.forms.FormsToolkit.createDialog(biz.ritter.javapi.awt.Dialog)">
            <summary>
            Create a DialogPeer object
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:biz.ritter.awt.forms.FormsToolkit.createWindow(biz.ritter.javapi.awt.Window)">
            <summary>
            Create a WindowPeer object
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:biz.ritter.net.protocol.http.Handler.openConnection(biz.ritter.javapi.net.URL)">
            <summary>
            Create a new URLConnection for http protocol
            </summary>
            <param name="u">URL</param>
            <returns></returns>
            <see cref="T:biz.ritter.javapi.net.URL"/>
        </member>
        <member name="F:biz.ritter.net.protocol.http.Connection.requestProperties">
            <summary>
            contains request properties
            </summary>
        </member>
        <member name="F:biz.ritter.net.protocol.http.Connection.url">
            <summary>
            Contains URL 
            </summary>
        </member>
        <member name="M:biz.ritter.net.protocol.http.Connection.#ctor(biz.ritter.javapi.net.URL)">
            <summary>
            Create new instance with given URL
            </summary>
            <param name="url"></param>
        </member>
        <member name="M:biz.ritter.net.protocol.http.Connection.addRequestProperty(System.String,System.String)">
            <summary>
            Add new request Properties
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <exception cref="T:biz.ritter.javapi.lang.NullPointerException"></exception>
            <exception cref="T:biz.ritter.javapi.lang.IllegalStateException"></exception>
        </member>
        <member name="M:biz.ritter.net.protocol.http.Connection.getInputStream">
            <summary>
            Return the http input stream
            </summary>
            <returns></returns>
        </member>
        <member name="T:biz.ritter.io.InputStreamWrapper">
            <summary>
            Wrap .net System.IO.Stream instance as java.io.InputStream
            </summary>
        </member>
        <member name="M:biz.ritter.io.InputStreamWrapper.read(System.Byte[],System.Int32,System.Int32)">
            Optimized reading for files
        </member>
        <member name="T:biz.ritter.io.InputStreamWrapper4Reader">
            <summary>
            Wrap .net System.IO.TextReader instance as java.io.InputStream, because
            java.lang.Process need InputStream not Reader
            </summary>
        </member>
        <member name="T:biz.ritter.io.StreamWrapper">
            <summary>
            Wrap java.io.InputStream or java.io.OutputStream as System.IO.Stream
            </summary>
        </member>
        <member name="T:biz.ritter.javapi.awt.eventj.WindowAdapter">
            <summary>
            Empty implementation of <see cref="T:biz.ritter.javapi.awt.eventj.WindowListener"/>, <see cref="T:biz.ritter.javapi.awt.eventj.WindowFocusListener"/> and <see cref="T:biz.ritter.javapi.awt.eventj.WindowStateListener"/>
            </summary>
        </member>
        <member name="F:biz.ritter.javapi.awt.Component.BOUNDS_NOMOVE">
            <summary>
            Means only size should be changed. (Basties note: excluded von Apache WTK NativeWindow Interface)
            </summary>
        </member>
        <member name="F:biz.ritter.javapi.awt.Component.BOUNDS_NOSIZE">
            <summary>
            Means only position should be changed. (Basties note: excluded von Apache WTK NativeWindow Interface)
            </summary>
        </member>
        <member name="F:biz.ritter.javapi.awt.Component.parent">
            <summary>
            The parent container, wich included this component.
            </summary>
        </member>
        <member name="F:biz.ritter.javapi.awt.Component.toolkit">
            <summary>
            The GUI toolkit
            </summary>
        </member>
        <member name="F:biz.ritter.javapi.awt.Component.valid">
            <summary>
            Flag for (in)validate component.
            </summary>
        </member>
        <member name="F:biz.ritter.javapi.awt.Component.TOP_ALIGNMENT">
            <summary>
            Constant for component alignment
            </summary>
        </member>
        <member name="F:biz.ritter.javapi.awt.Component.CENTER_ALIGNMENT">
            <summary>
            Constant for component alignment
            </summary>
        </member>
        <member name="F:biz.ritter.javapi.awt.Component.BOTTOM_ALIGNMENT">
            <summary>
            Constant for component alignment
            </summary>
        </member>
        <member name="F:biz.ritter.javapi.awt.Component.LEFT_ALIGNMENT">
            <summary>
            Constant for component alignment
            </summary>
        </member>
        <member name="F:biz.ritter.javapi.awt.Component.RIGHT_ALIGNMENT">
            <summary>
            Constant for component alignment
            </summary>
        </member>
        <member name="F:biz.ritter.javapi.awt.Component.x">
            <summary>
            Component x location
            </summary>
        </member>
        <member name="F:biz.ritter.javapi.awt.Component.y">
            <summary>
            Component y location
            </summary>
        </member>
        <member name="F:biz.ritter.javapi.awt.Component.width">
            <summary>
            Component width
            </summary>
        </member>
        <member name="F:biz.ritter.javapi.awt.Component.height">
            <summary>
            Component height
            </summary>
        </member>
        <member name="F:biz.ritter.javapi.awt.Dialog.delegateInstance">
            <summary>
            Containts the implementation class for an AWT Dialog.
            </summary>
        </member>
        <member name="F:biz.ritter.javapi.awt.image.DirectColorModel.is_sRGB">
            <summary>
            ColorModel has sRGB ColorSpace
            </summary>
        </member>
        <member name="F:biz.ritter.javapi.awt.image.DirectColorModel.is_LINEAR_RGB">
            <summary>
            Color Model has Linear RGB Color Space
            </summary>
        </member>
        <member name="F:biz.ritter.javapi.awt.Frame.delegateInstance">
            <summary>
            Containts the implementation class for an AWT Frame.
            </summary>
        </member>
        <member name="M:biz.ritter.javapi.awt.peer.DialogPeer.setTitle(System.String)">
            <summary>
            Set the title of frame
            </summary>
            <param name="newTitle">title</param>
        </member>
        <member name="M:biz.ritter.javapi.awt.peer.WindowPeer.setVisible(System.Boolean)">
            <summary>
            Display or hides this frame and contained child GUI element.
            </summary>
            <param name="showMe">true if to display, false if to hide</param>
        </member>
        <member name="M:biz.ritter.javapi.awt.peer.WindowPeer.show">
            <summary>
            Show the window - obsoleted by setVisisble()
            </summary>
        </member>
        <member name="M:biz.ritter.javapi.awt.peer.WindowPeer.getHeight">
            <summary>
            Return the window height in pixel
            </summary>
            <returns></returns>
        </member>
        <member name="M:biz.ritter.javapi.awt.peer.WindowPeer.getWidth">
            <summary>
            Return the window width in pixel
            </summary>
            <returns></returns>
        </member>
        <member name="M:biz.ritter.javapi.awt.peer.WindowPeer.getX">
            <summary>
            Return the window x location 
            </summary>
            <returns></returns>
        </member>
        <member name="M:biz.ritter.javapi.awt.peer.WindowPeer.getY">
            <summary>
            Return the window y location
            </summary>
            <returns></returns>
        </member>
        <member name="M:biz.ritter.javapi.awt.peer.FramePeer.setTitle(System.String)">
            <summary>
            Set the title of frame
            </summary>
            <param name="newTitle">title</param>
        </member>
        <member name="M:biz.ritter.javapi.awt.peer.FramePeer.pack">
            <summary>
            Set window dimension to optimal size
            </summary>
        </member>
        <member name="M:biz.ritter.javapi.awt.peer.FramePeer.setSize(System.Int32,System.Int32)">
            <summary>
            Set the new windows dimension 
            </summary>
            <param name="width">width of window</param>
            <param name="height">height of window</param>
        </member>
        <member name="M:biz.ritter.javapi.awt.Toolkit.createFrame(biz.ritter.javapi.awt.Frame)">
            <summary>
            Create a Frame.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:biz.ritter.javapi.awt.Toolkit.createDialog(biz.ritter.javapi.awt.Dialog)">
            <summary>
            Create a Dialog.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:biz.ritter.javapi.awt.Toolkit.createWindow(biz.ritter.javapi.awt.Window)">
            <summary>
            Create a Window.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:biz.ritter.javapi.awt.Toolkit.getDefaultToolkit">
            <summary>
            Gets the default toolkit.
            </summary>
            <returns></returns>
        </member>
        <member name="M:biz.ritter.javapi.awt.Toolkit.lockAWT">
            <summary>
            Method for Apache Harmony compatiblity
            </summary>
        </member>
        <member name="M:biz.ritter.javapi.awt.Toolkit.unlockAWT">
            <summary>
            Method for Apache Harmony compatiblity
            </summary>
        </member>
        <member name="F:biz.ritter.javapi.awt.Window.delegateInstance">
            <summary>
            Containts the implementation class for an AWT Dialog.
            </summary>
        </member>
        <member name="M:biz.ritter.javapi.beans.VetoableChangeListener.vetoableChange(biz.ritter.javapi.beans.PropertyChangeEvent)">
            <summary>
            Method tells a vetoable change on property is coming.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:biz.ritter.javapi.beans.Visibility.avoidingGui">
            <summary>
            Bean avoiding GUI
            </summary>
            <returns></returns>
        </member>
        <member name="M:biz.ritter.javapi.beans.Visibility.dontUseGui">
            <summary>
            Hey Bean, do not use GUI!
            </summary>
        </member>
        <member name="M:biz.ritter.javapi.beans.Visibility.needsGui">
            <summary>
            This Bean need a GUI.
            </summary>
            <returns>GUI needed?</returns>
        </member>
        <member name="M:biz.ritter.javapi.beans.Visibility.okToUseGui">
            <summary>
            Bean can use a GUI.
            </summary>
        </member>
        <member name="M:biz.ritter.javapi.io.PrintWriter.print(System.String)">
            <summary>
            Prints a string to the target. The string is converted to an array of 
             bytes using the encoding chosen during the construction of this writer.
             The bytes are then written to the target with {@code write(int)}.
             <para>
             If an I/O error occurs, this writer's error flag is set to <code>true</code>.
             </para>
            </summary>
            <param name="str">the string to print to the target.</param>
            <see cref="M:biz.ritter.javapi.io.PrintWriter.write(System.Int32)"/>
        </member>
        <member name="M:biz.ritter.javapi.io.RandomAccessFile.write(System.Byte)">
            <summary>
            Write a single byte
            </summary>
            <param name="b"></param>
        </member>
        <member name="M:biz.ritter.javapi.io.File.canWrite">
            <summary>
            Check is java.io.File instance is writable.
            </summary>
            <returns></returns>
        </member>
        <member name="M:biz.ritter.javapi.io.File.createNewFile">
            <summary>
            Create a new file, with given path if not exist
            </summary>
            <returns>true, if created</returns>
        </member>
        <member name="M:biz.ritter.javapi.io.File.renameTo(biz.ritter.javapi.io.File)">
            <summary>
            Rename this file to dest.
            </summary>
            <param name="dest">new File</param>
            <returns>true, if renamed</returns>
            <exception cref="T:biz.ritter.javapi.lang.NullPointerException">dest is null</exception>
            <exception cref="T:biz.ritter.javapi.lang.SecurityException">no read/write access for old/new file</exception>
        </member>
        <member name="M:biz.ritter.javapi.io.File.mkdir">
            <summary>
            Create a new directory
            </summary>
            <returns>true if is created</returns>
        </member>
        <member name="M:biz.ritter.javapi.io.FileInputStream.read(System.Byte[],System.Int32,System.Int32)">
            Optimized reading for files
        </member>
        <member name="M:biz.ritter.javapi.io.FileOutputStream.#ctor(biz.ritter.javapi.io.File)">
            <summary>
            Construct new instance with given File object
            </summary>
            <param name="f"></param>
        </member>
        <member name="M:biz.ritter.javapi.io.FileOutputStream.#ctor(biz.ritter.javapi.io.File,System.Boolean)">
            <summary>
            Create a new instance and go to end to append data
            </summary>
            <param name="f"></param>
            <param name="append"></param>
        </member>
        <member name="M:biz.ritter.javapi.io.FileOutputStream.#ctor(System.String,System.Boolean)">
            <summary>
            Create a new instance and go to end to append data
            </summary>
            <param name="name"></param>
            <param name="append"></param>
        </member>
        <member name="T:biz.ritter.javapi.io.PushbackInputStream">
            <summary>
             Wraps an existing {@link InputStream} and adds functionality to "push back"
             bytes that have been read, so that they can be read again. Parsers may find
             this useful. The number of bytes which may be pushed back can be specified
             during construction. If the buffer of pushed back bytes is empty, bytes are
             read from the underlying input stream.
             </summary>
             <remarks>Class is ported from Apache Harmony project.</remarks>
        </member>
        <member name="T:biz.ritter.javapi.io.Serializable">
            <summary>
            Declaration-interface
            </summary>
        </member>
        <member name="T:biz.ritter.javapi.io.Writer">
            <summary>
            The base class for all writers. A writer is a means of writing data to a
            target in a character-wise manner. Most output streams expect the
            {@link #flush()} method to be called before closing the stream, to ensure all
            data is actually written out.
            <p/>
            This abstract class does not provide a fully working implementation, so it
            needs to be subclassed, and at least the {@link #write(char[], int, int)},
            {@link #close()} and {@link #flush()} methods needs to be overridden.
            Overriding some of the non-abstract methods is also often advised, since it
            might result in higher efficiency.
            <p/>
            Many specialized readers for purposes like reading from a file already exist
            in this package.
            
            <see cref="T:biz.ritter.javapi.io.Reader"/>
            </summary>
            <remarks>Class is ported from Apache Harmony project.</remarks>
        </member>
        <member name="M:biz.ritter.javapi.io.Writer.checkError">
            <summary>
             Returns true if this writer has encountered and suppressed an error. Used
             by PrintWriters as an alternative to checked exceptions.
            </summary>
        </member>
        <member name="T:biz.ritter.javapi.io.IOError">
            <summary>
            This error is thrown when a severe I/O error has happened.
            </summary>
        </member>
        <member name="M:biz.ritter.javapi.io.IOError.#ctor(biz.ritter.javapi.lang.Throwable)">
            <summary>
            Constructs a new instance of <see cref="T:biz.ritter.javapi.io.IOError"/> with its cause filled in.
            </summary>
            <param name="cause">The detail cause for the error.</param>
        </member>
        <member name="M:biz.ritter.javapi.lang.ClassLoader.getResourceAsStream(System.String)">
            <summary>
            Creates an InputStream for given resource. Resources are define as path with slash separator /. 
            Returns null if no resource found.
            </summary>
            <param name="name"></param>
            <returns>InputSteam or null</returns>
        </member>
        <member name="M:biz.ritter.javapi.lang.ClassLoader.findResource(System.String)">
            <summary>
            Find the resource with given name
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:biz.ritter.javapi.lang.OutOfMemoryError">
            <summary>
            Only for API compatibility - DO NOT USE THIS CLASS with C#
            <para>catch ever System.OutOfMemoryException</para>
            </summary>
        </member>
        <member name="M:biz.ritter.javapi.lang.OutOfMemoryError.#ctor">
            <summary>
            Only for API compatibility - DO NOT USE THIS CLASS with C#
            <para>catch ever System.OutOfMemoryException</para>
            </summary>
        </member>
        <member name="M:biz.ritter.javapi.lang.OutOfMemoryError.#ctor(System.String)">
            <summary>
            Only for API compatibility - DO NOT USE THIS CLASS with C#
            <para>catch ever System.OutOfMemoryException</para>
            </summary>
        </member>
        <member name="T:biz.ritter.javapi.lang.reflect.Array">
            <summary>
            Reflection type for working with arrays.
            </summary>
        </member>
        <member name="M:biz.ritter.javapi.lang.reflect.Array.getLength(System.Object)">
            <summary>
            Compute the length of first dimension from given array
            </summary>
            <param name="array">array</param>
            <returns>size of first dimension</returns>
            <exception cref="T:biz.ritter.javapi.lang.IllegalArgumentException">Throw an java.lang.IllegalArgumentException if given object is not an array.</exception> 
            <exception cref="T:biz.ritter.javapi.lang.NullPointerException">Throw an java.lang.NullPointerException if given object is not an array.</exception> 
        </member>
        <member name="M:biz.ritter.javapi.lang.reflect.Array.get(System.Object,System.Int32)">
            <summary>
            Get the object stored on given offset in array
            </summary>
            <param name="array">array</param>
            <param name="offset">zero based index</param>
            <returns>Object on index</returns>
            <exception cref="T:biz.ritter.javapi.lang.IllegalArgumentException">Throw an java.lang.IllegalArgumentException if given object is not an array.</exception> 
            <exception cref="T:biz.ritter.javapi.lang.NullPointerException">Throw an java.lang.NullPointerException if given object is not an array.</exception> 
        </member>
        <member name="M:biz.ritter.javapi.lang.reflect.Array.set(System.Object,System.Int32,System.Object)">
            <summary>
            Set the object stored on given offset in array
            </summary>
            <param name="array">array</param>
            <param name="offset">zero based index</param>
            <returns>Object on index</returns>
            <exception cref="T:biz.ritter.javapi.lang.IllegalArgumentException">Throw an java.lang.IllegalArgumentException if given object is not an array.</exception> 
            <exception cref="T:biz.ritter.javapi.lang.NullPointerException">Throw an java.lang.NullPointerException if given object is not an array.</exception> 
            <exception cref="T:biz.ritter.javapi.lang.ArrayIndexOutOfBoundsException">Throw an java.lang.ArrayIndexOutOfBoundsException if given index is lesser zero, equals length of array or greater length of array.</exception> 
        </member>
        <member name="M:biz.ritter.javapi.lang.reflect.Array.newInstance(System.Type,System.Int32)">
            <summary>
            Create new Array of type with giving length
            </summary>
            <param name="type">type / classe</param>
            <param name="length">size of array</param>
            <returns></returns>
        </member>
        <member name="M:biz.ritter.javapi.lang.reflect.Array.newInstance(biz.ritter.javapi.lang.Class,System.Int32)">
            <summary>
            Create new Array of type with giving length
            </summary>
            <param name="clazz">type / classe</param>
            <param name="length">size of array</param>
            <returns></returns>
        </member>
        <member name="M:biz.ritter.javapi.lang.reflect.Array.cast(System.Object)">
            <summary>
            Cast the given object to System.Array instance.
            </summary>
            <param name="array">the object</param>
            <returns>A System.Array instance of given object</returns>
            <exception cref="T:biz.ritter.javapi.lang.IllegalArgumentException">Throw an java.lang.IllegalArgumentException if given object is not an array.</exception> 
            <exception cref="T:biz.ritter.javapi.lang.NullPointerException">Throw an java.lang.NullPointerException if given object is not an array.</exception> 
        </member>
        <member name="F:biz.ritter.javapi.lang.reflect.Constructor.delegateInstance">
            <summary>
            .net reflection type to delegate methods
            </summary>
        </member>
        <member name="M:biz.ritter.javapi.lang.reflect.Constructor.#ctor(System.Reflection.ConstructorInfo)">
            <summary>
            Creates a new constructor instance with .net reflection type.
            </summary>
            <param name="ci"></param>
        </member>
        <member name="M:biz.ritter.javapi.lang.reflect.Constructor.newInstance(System.Object[])">
            <summary>
            Create a new instance by calling representing constructor with given arguments.
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:biz.ritter.javapi.lang.reflect.InvocationTargetException.#ctor(System.Reflection.TargetInvocationException)">
            <summary>
            In addition, .net TargetInvocationException is repacked
            </summary>
            <param name="tie"></param>
        </member>
        <member name="T:biz.ritter.javapi.lang.reflect.MemberConstants">
            <summary>
            Constants of java.lang.reflect.Member interface
            </summary>
        </member>
        <member name="F:biz.ritter.javapi.lang.SystemJ.outJ">
            <see cref="F:biz.ritter.javapi.lang.SystemJ.outJ"/>
        </member>
        <member name="M:biz.ritter.javapi.lang.Byte.#ctor(System.SByte)">
            <summary>
            In addition, set the signed byte value.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:biz.ritter.javapi.lang.Byte.sbyteValue">
            <summary>
            In addition, returns thesigned byte value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:biz.ritter.javapi.lang.Byte.op_Implicit(biz.ritter.javapi.lang.Byte)~System.Byte">
            <summary>
            Implicit convert java.lang.Byte to .net byte type
            </summary>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:biz.ritter.javapi.lang.Class.getMethod(System.String,biz.ritter.javapi.lang.Class[])">
            <summary>
            Return the method
            </summary>
            <param name="name"></param>
            <param name="paramTypes"></param>
            <returns></returns>
        </member>
        <member name="M:biz.ritter.javapi.lang.Class.getMethod(System.String,System.Type[])">
            <summary>
            In addition, a method is provided to implement some nearlier at .net framework.
            </summary>
            <param name="name"></param>
            <param name="paramTypes"></param>
            <returns></returns>
            <exception cref="T:biz.ritter.javapi.lang.NoSuchMethodException"></exception>
        </member>
        <member name="M:biz.ritter.javapi.lang.Class.getConstructor(biz.ritter.javapi.lang.Class[])">
            <summary>
            Return the constructor
            </summary>
            <param name="paramTypes"></param>
            <returns></returns>
        </member>
        <member name="M:biz.ritter.javapi.lang.Class.getDelegateInstance">
            <summary>
            This helper method returns the underlying .net type.
            </summary>
            <returns>The type that wrapped.</returns>
        </member>
        <member name="M:biz.ritter.javapi.lang.Class.getName">
            <summary>
            Return the name
            </summary>
            <returns>class name</returns>
        </member>
        <member name="M:biz.ritter.javapi.lang.Class.getDeclaredMethods">
            <summary>
            Get all declared Method of this type.
            </summary>
            <returns>method array</returns>
        </member>
        <member name="M:biz.ritter.javapi.lang.Class.getSuperclass">
            <summary>
            Return the class from which the current class directly inherit.
            </summary>
            <returns>super class</returns>
        </member>
        <member name="M:biz.ritter.javapi.lang.Class.isInstance(System.Object)">
            <summary>
            Check given object is instance of class type.
            </summary>
            <param name="obj">object</param>
            <returns>true if obj is type</returns>
        </member>
        <member name="M:biz.ritter.javapi.lang.Class.newInstance">
            <summary>
            Create a new instance by calling default constructor
            </summary>
            <returns>instance of type</returns>
        </member>
        <member name="M:biz.ritter.javapi.lang.Class.forName(System.String)">
            <summary>
            Search the system for given class and return this.
            </summary>
            <param name="className">see System.Type.AssemblyQualifedName</param>
            <returns></returns>
        </member>
        <member name="M:biz.ritter.javapi.lang.Class.forName(System.String,System.Boolean,biz.ritter.javapi.lang.ClassLoader)">
            <summary>
            Search the system for given class and return this.
            </summary>
            <param name="className">see System.Type.AssemblyQualifedName</param>
            <param name="cl">ClassLoader - ignored</param>
            <param name="initialize">ignored - ever like true</param>
            <returns></returns>
        </member>
        <member name="M:biz.ritter.javapi.lang.Class.getClassLoader">
            <summary>
            Returns the systen class loader
            </summary>
            <returns></returns>
        </member>
        <member name="M:biz.ritter.javapi.lang.Short.op_Implicit(biz.ritter.javapi.lang.Short)~System.Int16">
            <summary>
            Implicit convert java.lang.Double to .net double type
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="T:biz.ritter.javapi.lang.Package">
            <summary>
            The package - like the namespace
            </summary>
        </member>
        <member name="M:biz.ritter.javapi.lang.AbstractStringBuilder.#ctor(System.String)">
            <summary>
            Create new AbstractStringBuilder
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:biz.ritter.javapi.lang.Boolean.op_Implicit(biz.ritter.javapi.lang.Boolean)~System.Boolean">
            <summary>
            Implicit convert java.lang.Boolean to .net bool type
            </summary>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:biz.ritter.javapi.lang.Boolean.op_Implicit(System.Boolean)~biz.ritter.javapi.lang.Boolean">
            <summary>
            Implicit convert java.lang.Boolean to .net bool type
            </summary>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="T:biz.ritter.javapi.lang.Deprecated">
            <summary>
            Simple Implementation of <code>Deprecated</code> annotation, but
            we cannot extends the .net <code>System.ObsoleteAttribute</code> and
            so use [Obsolete] are better for IDE...
            </summary>
        </member>
        <member name="M:biz.ritter.javapi.lang.Double.parseDouble(System.String)">
            <summary>
            Return new double value from given String. Calls the valueOf method.
            </summary>
            <param name="d">String with double value</param>
            <returns>double value</returns>
        </member>
        <member name="M:biz.ritter.javapi.lang.Double.valueOf(System.String)">
            <summary>
            Return a new <code>java.lang.Double</code> instance form given String
            </summary>
            <param name="d">String with double value</param>
            <returns>java.lang.Double instance</returns>
        </member>
        <member name="M:biz.ritter.javapi.lang.Double.toHexString(System.Double)">
            <summary>
            Convert double value to Hex-String
            </summary>
            <param name="d">double vale</param>
            <returns>Hex string</returns>
        </member>
        <member name="M:biz.ritter.javapi.lang.Double.op_Implicit(biz.ritter.javapi.lang.Double)~System.Double">
            <summary>
            Implicit convert java.lang.Double to .net double type
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:biz.ritter.javapi.lang.Float.toHexString(System.Single)">
            <summary>
            Return an Hex-String representation of float value
            </summary>
            <param name="f">float value</param>
            <returns>Hex-String</returns>
        </member>
        <member name="M:biz.ritter.javapi.lang.Float.op_Implicit(biz.ritter.javapi.lang.Float)~System.Single">
            <summary>
            Implicit convert java.lang.Float to .net float type
            </summary>
            <param name="f"></param>
            <returns></returns>
        </member>
        <member name="M:biz.ritter.javapi.lang.Integer.op_Implicit(biz.ritter.javapi.lang.Integer)~System.Int32">
            <summary>
            Implicit convert java.lang.Integer to .net int type
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:biz.ritter.javapi.lang.Integer.op_Implicit(System.Int32)~biz.ritter.javapi.lang.Integer">
            <summary>
            Implicit convert .net int type to java.lang.Integer 
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:biz.ritter.javapi.lang.Long.op_Implicit(biz.ritter.javapi.lang.Long)~System.Int64">
            <summary>
            Implicit convert java.lang.Double to .net double type
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="T:biz.ritter.javapi.lang.ArrayIndexOutOfBoundsException">
            <summary>
            Thrown when the an array is indexed with a value less than zero, or greater
            than or equal to the size of the array.
            </summary>
            <remarks>Class is ported from Apache Harmony project.</remarks>
        </member>
        <member name="T:biz.ritter.javapi.lang.CharSequence">
            <remarks>Author: Sebastian Ritter</remarks>
        </member>
        <member name="T:biz.ritter.javapi.lang.IllegalStateException">
            <remarks>Class is ported from Apache Harmony project.</remarks>
        </member>
        <member name="M:biz.ritter.javapi.lang.Process.getInputStream">
            <summary>
            Return the InputStream for executing process
            </summary>
            <returns>The input stream.</returns>
        </member>
        <member name="M:biz.ritter.javapi.lang.StringJ.matches(System.String)">
            <summary>
            Check string instance for matching giving regular expression.
            </summary>
            <param name="expr">regular expression</param>
            <returns></returns>
        </member>
        <member name="M:biz.ritter.javapi.lang.StringJ.op_Implicit(biz.ritter.javapi.lang.StringJ)~System.String">
            <summary>
            Implicit convert java.lang.String to .net System.String type
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:biz.ritter.javapi.lang.StringJ.op_Implicit(System.String)~biz.ritter.javapi.lang.StringJ">
            <summary>
            Implicit convert .net System.String to java.lang.String type
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:biz.ritter.javapi.lang.StringJ.getBytes">
            <summary>
            Extends System.String
            Encodes this {@code String} into a sequence of bytes using the
            platform's default charset, storing the result into a new byte array.
            </summary>
            <returns>The resultant byte array</returns>
        </member>
        <member name="M:biz.ritter.javapi.lang.StringJ.getBytes(System.String)">
            <summary>
            Extends System.String
            Encodes this {@code String} into a sequence of bytes using the named
            charset, storing the result into a new byte array.
            
            </summary>
            <exception cref="T:biz.ritter.javapi.io.UnsupportedEncodingException">If the named charset is not supported</exception>
            <param name="charsetName"></param>
            <returns></returns>
        </member>
        <member name="M:biz.ritter.javapi.lang.Thread.currentThread">
            <summary>
            Return the current thread
            </summary>
            <returns></returns>
        </member>
        <member name="M:biz.ritter.javapi.lang.Thread.getContextClassLoader">
            <summary>
            Return the System ClassLoader
            </summary>
            <returns></returns>
        </member>
        <member name="M:biz.ritter.javapi.lang.Thread.setContextClassLoader(biz.ritter.javapi.lang.ClassLoader)">
            <summary>
            Set the context class loader
            </summary>
            <param name="cl"></param>
        </member>
        <member name="M:biz.ritter.javapi.lang.Thread.setName(System.String)">
            <summary>
            Set the name of Thread instance to newName
            </summary>
            <param name="newName"></param>
        </member>
        <member name="M:biz.ritter.javapi.lang.Thread.getName">
            <summary>
            Get the name of Thread instance
            </summary>
            <returns></returns>
        </member>
        <member name="M:biz.ritter.javapi.lang.Thread.setDaemon(System.Boolean)">
            <summary>
            Set this Thread instance to background / daemon thread or not.
            </summary>
            <param name="onOrOff"></param>
        </member>
        <member name="M:biz.ritter.javapi.lang.Thread.isDaemon">
            <summary>
            Return Thread instance is background / deamon thread information
            </summary>
            <returns></returns>
        </member>
        <member name="M:biz.ritter.javapi.lang.Thread.#ctor">
            <summary>
            Construct new Thread instance
            </summary>
        </member>
        <member name="M:biz.ritter.javapi.lang.Thread.#ctor(biz.ritter.javapi.lang.Runnable)">
            <summary>
            Construct new Thread instance for giving Runnable instance
            </summary>
            <param name="toRun"></param>
        </member>
        <member name="M:biz.ritter.javapi.lang.Thread.#ctor(System.String)">
            <summary>
            Construct new named Thread instance
            </summary>
        </member>
        <member name="M:biz.ritter.javapi.lang.Thread.#ctor(biz.ritter.javapi.lang.Runnable,System.String)">
            <summary>
            Construct new named Thread instance for giving Runnable instance
            </summary>
            <param name="toRun"></param>
            <param name="name"></param>
        </member>
        <member name="M:biz.ritter.javapi.lang.Thread.run">
            <summary>
            All todo is implemented in run method.
            </summary>
        </member>
        <member name="M:biz.ritter.javapi.lang.Thread.start">
            <summary>
            Start the Thread instance
            </summary>
        </member>
        <member name="M:biz.ritter.javapi.lang.Thread.getState">
            <summary>
            Return the State of Thread instance
            </summary>
            <returns></returns>
        </member>
        <member name="M:biz.ritter.javapi.lang.Thread.isAlive">
            <summary>
            Thread is started but not died.
            </summary>
            <returns>Thread running true / false</returns>
        </member>
        <member name="T:biz.ritter.javapi.lang.Thread.State">
            <summary>
             A representation of a thread's state. A given thread may only be in one state at a time.
            </summary>
        </member>
        <member name="M:biz.ritter.javapi.lang.Thread.sleep(System.Int64)">
            <summary>
            Let the Thread instance sleeping
            </summary>
            <param name="millis"></param>
        </member>
        <member name="F:biz.ritter.javapi.lang.Throwable.cause">
            <summary>
            Cause for this exception, if other it is.
            </summary>
        </member>
        <member name="M:biz.ritter.javapi.lang.Throwable.#ctor">
            <summary>
            Create new Throwable with empty message and no cause
            </summary>
        </member>
        <member name="M:biz.ritter.javapi.lang.Throwable.getStackTraceImpl">
            <summary>
            Create a new StackTraceElement [] 
            </summary>
            <returns></returns>
        </member>
        <member name="T:biz.ritter.javapi.lang.AutoCloseable">
            <summary>
            Represent a resource that should be close if not using.
            </summary>
        </member>
        <member name="M:biz.ritter.javapi.lang.AutoCloseable.close">
            <summary>
            Close resource, also from underlying system.
            </summary>
        </member>
        <member name="M:biz.ritter.javapi.lang.Runtime.exit(System.Int32)">
            <summary>
            Stop the current process.
            </summary>
            <param name="rc">return code for parent process</param>
        </member>
        <member name="M:biz.ritter.javapi.lang.Runtime.addShutdownHook(biz.ritter.javapi.lang.Thread)">
            <summary>
            Add an thread to running on exit the CLR.
            </summary>
            <param name="hook"></param>
        </member>
        <member name="T:biz.ritter.javapi.lang.annotation.Annotation">
            <summary>
            Do not use directly, better use AbstractAnnotation!!!
            </summary>
        </member>
        <member name="M:biz.ritter.javapi.net.URLConnection.#ctor">
            <summary>
            No default constructor allowed
            </summary>
        </member>
        <member name="M:biz.ritter.javapi.net.URLConnection.#ctor(biz.ritter.javapi.net.URL)">
            <summary>
            Create a new URLConnection instance with given URL
            </summary>
            <param name="url"></param>
        </member>
        <member name="M:biz.ritter.javapi.net.URLConnection.getContentType">
            <summary>
             Gets the MIME-type of the content specified by the response header field
             {@code content-type} or {@code null} if type is unknown.
            </summary>
            <returns>the value of the response header field {@code content-type}.</returns>
        </member>
        <member name="T:biz.ritter.javapi.net.URLStreamHandlerFactory">
             <summary>
            Defines a factory which creates an {@code URLStreamHandler} for a specified
            protocol. It is used by the class {@code URL}.
             </summary>
        </member>
        <member name="M:biz.ritter.javapi.net.URL.openStream">
            <summary>
            Same as openConnection.getInputStream ()
            </summary>
            <returns></returns>
        </member>
        <member name="M:biz.ritter.javapi.net.Socket.#ctor(System.Net.Sockets.Socket)">
            <summary>
            Is used from ServerSocket to accept clients.
            </summary>
            <param name="newDelegateInstance">new C# Socket instance</param>
        </member>
        <member name="T:biz.ritter.javapi.sql.Date">
            <summary>
            A class which can consume and produce dates in SQL {@code Date} format.
            <p/>
            Dates are represented in SQL as {@code yyyy-mm-dd}. Note that this date
            format only deals with year, month and day values. There are no values for
            hours, minutes, seconds.
            <p/>
            This is unlike the familiar {@code java.util.Date} object, which also includes
            values for hours, minutes, seconds, and milliseconds.
            <p/>
            Time points are handled as millisecond values - milliseconds since the Epoch,
            January 1st 1970, 00:00:00.000 GMT. Time values passed to the {@code
            java.sql.Date} class are "normalized" to the time 00:00:00.000 GMT on the
            date implied by the time value.
            
            </summary>
        </member>
        <member name="M:biz.ritter.javapi.sql.Timestamp.Equals(System.Object)">
            <summary>
            Tests to see if this timestamp is equal to a supplied object. 
            </summary>
            <param name="theObject">the object to which this timestamp is compared.</param>
            <returns>
            {@code true} if this {@code Timestamp} object is equal to the
            supplied {@code Timestamp} object<br/>{@code false} if the object
            is not a {@code Timestamp} object or if the object is a {@code
            Timestamp} but represents a different instant in time.
            </returns>
        </member>
        <member name="M:biz.ritter.javapi.text.NumberFormat.#ctor">
            <summary>
            Use factory methods to create instance.
            </summary>
        </member>
        <member name="M:biz.ritter.javapi.text.SimpleDateFormat.parse(System.String,biz.ritter.javapi.text.ParsePosition)">
            <summary>
            Parse String with given pattern on ParsePosition to Data object
            </summary>
            <param name="s"></param>
            <param name="pos"></param>
            <returns></returns>
        </member>
        <member name="T:biz.ritter.javapi.text.CharacterIterator">
            <summary>
             An interface for the bidirectional iteration over a group of characters. The
             iteration starts at the begin index in the group of characters and continues
             to one index before the end index.
             <strong>Note: DONE field is moved to </strong>
            </summary>
        </member>
        <member name="T:biz.ritter.javapi.text.MessageFormat">
            <summary>
            Dummy Class to compile JavApi
            </summary>
        </member>
        <member name="M:biz.ritter.javapi.util.regex.Pattern.matches(System.String,biz.ritter.javapi.lang.CharSequence)">
            <summary>
            Match input agains pattern.
            </summary>
            <param name="pattern"></param>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:biz.ritter.javapi.util.AbstractList`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Get the IEnumerator instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:biz.ritter.javapi.util.AbstractList`1.GetEnumerator">
            <summary>
            Get the IEnemurator instance for this wrapped java.util.Iterator.
            </summary>
            <returns></returns>
        </member>
        <member name="T:biz.ritter.javapi.util.AbstractMap`2">
            <summary>
            
            </summary>
            <remarks>
            Implementation details:
            <code>
             +-Class--------------+
             |     Object         |----------------------------------------------------+
             +--------------------+                                                    |
                      |            +-Interface-+                                       |
                    Java           | Map       |                                     .net
                      |            +-----------+                                       |
             +-Class--------------+     |                                              |
             |  AbstractMap       |-----+                                              |         
             +--------------------+     |                       +-Interface---+        |         
                      |              JavApi                     | IDictionary |        |         
                      |                 |                       +-------------+        |
             +--------------------+     |                              |      +-Class-----------+       
             | HashMap            |     +------------------------------+------|    Dictionary   |
             +--------------------+                                           +-----------------+
            </code>
            </remarks>
        </member>
        <member name="M:biz.ritter.javapi.util.AbstractSequentialList`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Get the IEnumerator instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:biz.ritter.javapi.util.AbstractSequentialList`1.GetEnumerator">
            <summary>
            Get the IEnemurator instance for this wrapped java.util.Iterator.
            </summary>
            <returns></returns>
        </member>
        <member name="T:biz.ritter.javapi.util.Collections`1">
            <summary>
            <c>Collections</c> contains static methods which operate on <c>Collection</c> classes.
            </summary>
        </member>
        <member name="M:biz.ritter.javapi.util.Collections`1.emptyList">
            <summary>
            Return the EMPTY_LIST
            </summary>
            <returns></returns>
            <see cref="F:biz.ritter.javapi.util.Collections`1.EMPTY_LIST"/>
        </member>
        <member name="M:biz.ritter.javapi.util.Date.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Create new Date instance with given year, month, day.
            <seealso cref="M:biz.ritter.javapi.util.Calendar.set(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)"/>
            </summary>
            <param name="year"></param>
            <param name="month"></param>
            <param name="day"></param>
        </member>
        <member name="M:biz.ritter.javapi.util.Date.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Create a new Data with given paramerts
            </summary>
            <param name="year"></param>
            <param name="month"></param>
            <param name="dayOfMonth"></param>
            <param name="hour"></param>
            <param name="minute"></param>
            <param name="second"></param>
        </member>
        <member name="M:biz.ritter.javapi.util.Date.getYear">
            <summary>
            The year since 1900
            </summary>
            <returns>Year since 1900</returns>
        </member>
        <member name="M:biz.ritter.javapi.util.Date.getMonth">
            <summary>
            The month, based on zero for January
            </summary>
            <returns>Month</returns>
        </member>
        <member name="M:biz.ritter.javapi.util.Date.getHours">
            <summary>
            The hour
            </summary>
            <returns>Hour</returns>
        </member>
        <member name="M:biz.ritter.javapi.util.Date.getMinutes">
            <summary>
            The minute
            </summary>
            <returns>Minute</returns>
        </member>
        <member name="M:biz.ritter.javapi.util.Date.getSeconds">
            <summary>
            The second
            </summary>
            <returns>Second</returns>
        </member>
        <member name="M:biz.ritter.javapi.util.Date.getDate">
            <summary>
            The day of month.
            </summary>
            <returns>Day of month</returns>
        </member>
        <member name="T:biz.ritter.javapi.util.EventListener">
            <summary>
            EventListener interface. All event listener need to implement this!
            </summary>
            <see cref="T:biz.ritter.javapi.util.EventObject"/>
            <see cref="T:biz.ritter.javapi.util.EventListenerProxy"/>
        </member>
        <member name="T:biz.ritter.javapi.util.EventListenerProxy">
            <summary>
            Abstract wrapper class for <code>EventListener</code> interface.
            </summary>
            <see cref="T:biz.ritter.javapi.util.EventListener"/>
            <see cref="T:biz.ritter.javapi.util.EventObject"/>
        </member>
        <member name="M:biz.ritter.javapi.util.EventListenerProxy.#ctor(biz.ritter.javapi.util.EventListener)">
            <summary>
             Create a new wrapper instance with given object.
            </summary>
            <param name="objectToProxy">EventListener for proxy instance.</param>
        </member>
        <member name="M:biz.ritter.javapi.util.EventListenerProxy.getListener">
            <summary>
            Returns the wrapped EventListener instance
            </summary>
            <returns>EventListener instance</returns>
        </member>
        <member name="T:biz.ritter.javapi.util.Hashtable`2">
            <summary>
            <strong>In change to Java this class extends java.util.AbstractMap and implements
            java.util.Dictionary.</strong>
            </summary>
            <typeparam name="K"></typeparam>
            <typeparam name="V"></typeparam>
        </member>
        <member name="T:biz.ritter.javapi.util.Locale">
            <summary>
            <code>Locale</code> represents a language/countrycombination. It is an identifier
            which dictates particular conventions for the presentation of information.
            The language codes are two letter lowercase codes as defined by ISO-639. The
            country codes are three letter uppercase codes as defined by ISO-3166.
            </summary>
        </member>
        <member name="M:biz.ritter.javapi.util.Locale.#ctor(System.String,System.String)">
            <summary>
             Create a new Locale instance with language and country
            </summary>
            <param name="country">ISO 3166 two char country code</param>
            <param name="language">ISO 639 two char language code</param>
        </member>
        <member name="T:biz.ritter.javapi.util.Map`2">
            <summary>
            A <code>Map</code> is a data structure consisting of a set of keys and values
            in which each key is mapped to a single value.  The class of the objects
            used as keys is declared when the <code>Map</code> is declared, as is the 
            class of the corresponding values.
            <p />
            A <code>Map</code> provides helper methods to iterate through all of the
            keys contained in it, as well as various methods to access and update 
            the key/value pairs.  
            </summary>
            <typeparam name="K">key type</typeparam>
            <typeparam name="V">value type</typeparam>
        </member>
        <member name="M:biz.ritter.javapi.util.StringTokenizer.#ctor(System.String)">
            <summary>
            Constructs a new {@code StringTokenizer} for the parameter string using
            whitespace as the delimiter. The {@code returnDelimiters} flag is set to
            {@code false}.
            </summary>
            <param name="str">the string to be tokenized.</param>
        </member>
        <member name="M:biz.ritter.javapi.util.StringTokenizer.#ctor(System.String,System.String)">
            <summary>
            Constructs a new {@code StringTokenizer} for the parameter string using
            the specified delimiters. The {@code returnDelimiters} flag is set to
            {@code false}. If {@code delimiters} is {@code null}, this constructor
            doesn't throw an {@code Exception}, but later calls to some methods might
            throw a {@code NullPointerException}.
            </summary>
            <param name="str">the string to be tokenized.</param>
            <param name="delimiters">the delimiters to use.</param>
        </member>
        <member name="M:biz.ritter.javapi.util.StringTokenizer.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Constructs a new {@code StringTokenizer} for the parameter string using
            the specified delimiters, returning the delimiters as tokens if the
            parameter {@code returnDelimiters} is {@code true}. If {@code delimiters}
            is null this constructor doesn't throw an {@code Exception}, but later
            calls to some methods might throw a {@code NullPointerException}.
            </summary>
            <param name="str">the string to be tokenized.</param>
            <param name="delimiters">the delimiters to use.</param>
            <param name="returnDelimiters">{@code true} to return each delimiter as a token.</param>
        </member>
        <member name="T:biz.ritter.javapi.util.TreeMap`2">
            <summary>
             TreeMap is an implementation of SortedMap. All optional operations (adding
             and removing) are supported. The values can be any objects. The keys can be
             any objects which are comparable to each other either using their natural
             <p>@since 1.2</p>
            </summary>
            <typeparam name="K">type of key</typeparam>
            <typeparam name="V">type of value</typeparam>
        </member>
        <member name="T:biz.ritter.javapi.util.zip.Adler32">
            <summary>
            The Adler32 class is used to compute a Adler32 checksum from data provided as
            input value.
            </summary>
            <seealso cref="!:http://en.wikipedia.org/wiki/Adler32#Example_implementation"/>
            <remarks>
            The Adler32 class compute a Adler32 checksum from data provided as input value.
            It implements the Wikipedia source code sample as C# code.
            If big array is used, you can become out of memory.
            </remarks>
        </member>
        <member name="F:biz.ritter.javapi.util.zip.Adler32.MOD_ADLER32">
            <summary>
            The modulo factor for Adler32
            </summary>
        </member>
        <member name="F:biz.ritter.javapi.util.zip.Adler32.content">
            <summary>
            The content for compute checksum
            </summary>
        </member>
        <member name="F:biz.ritter.javapi.util.zip.Adler32.checksum">
            <summary>
            The last checksum
            </summary>
        </member>
        <member name="M:biz.ritter.javapi.util.zip.Adler32.#ctor">
            <summary>
            Construct a new Adler32 instance.
            </summary>
        </member>
        <member name="M:biz.ritter.javapi.util.zip.Adler32.getValue">
            <summary>
            Return the Adler32 checksum
            </summary>
            <returns>Adler32 checksum</returns>
        </member>
        <member name="M:biz.ritter.javapi.util.zip.Adler32.compute">
            <summary>
            Compute the checksum
            </summary>
        </member>
        <member name="T:biz.ritter.javapi.util.zip.CRC32">
            <summary>
            The CRC32 class is used to compute a CRC32 checksum from data provided as
            input value.
            </summary>
            <see cref="!:http://issues.apache.org/jira/browse/HADOOP-6148"/>
            <see cref="!:http://www.codeplex.com/npoi"/>
        </member>
        <member name="M:biz.ritter.javapi.util.zip.CRC32.getValue">
            <summary>
            Return the CRC checksum
            </summary>
            <returns>Adler32 checksum</returns>
        </member>
        <member name="T:biz.ritter.javapi.util.zip.Inflater">
            <summary>
             <para>
             This class uncompresses data that was compressed using the <i>DEFLATE</i>
             algorithm (see <a href="http://www.gzip.org/algorithm.txt">specification</a>).
             </para>
             <para>
             Basically this class is part of the API to the stream based ZLIB compression
             library and is used as such by {@code InflaterInputStream} and its
             descendants.
             <para/>
             <para>
             The typical usage of a {@code Inflater} outside this package consists of a
             specific call to one of its constructors before being passed to an instance
             of {@code InflaterInputStream}.
             <para>
             @see InflaterInputStream
             @see Deflater
            </para>
            </para>
            </para>
            </summary>
        </member>
        <member name="F:biz.ritter.javapi.util.zip.ZipFile.LOCSIG">
            <summary>
            Constant for ZIP file handling.
            </summary>
        </member>
        <member name="F:biz.ritter.javapi.util.zip.ZipFile.EXTSIG">
            <summary>
            Constant for ZIP file handling.
            </summary>
        </member>
        <member name="F:biz.ritter.javapi.util.zip.ZipFile.CENSIG">
            <summary>
            Constant for ZIP file handling.
            </summary>
        </member>
        <member name="F:biz.ritter.javapi.util.zip.ZipFile.ENDSIG">
            <summary>
            Constant for ZIP file handling.
            </summary>
        </member>
        <member name="F:biz.ritter.javapi.util.zip.ZipFile.LOCHDR">
            <summary>
            Constant for ZIP file handling.
            </summary>
        </member>
        <member name="F:biz.ritter.javapi.util.zip.ZipFile.EXTHDR">
            <summary>
            Constant for ZIP file handling.
            </summary>
        </member>
        <member name="F:biz.ritter.javapi.util.zip.ZipFile.CENHDR">
            <summary>
            Constant for ZIP file handling.
            </summary>
        </member>
        <member name="F:biz.ritter.javapi.util.zip.ZipFile.ENDHDR">
            <summary>
            Constant for ZIP file handling.
            </summary>
        </member>
        <member name="F:biz.ritter.javapi.util.zip.ZipFile.LOCVER">
            <summary>
            Constant for ZIP file handling.
            </summary>
        </member>
        <member name="F:biz.ritter.javapi.util.zip.ZipFile.LOCFLG">
            <summary>
            Constant for ZIP file handling.
            </summary>
        </member>
        <member name="F:biz.ritter.javapi.util.zip.ZipFile.LOCHOW">
            <summary>
            Constant for ZIP file handling.
            </summary>
        </member>
        <member name="F:biz.ritter.javapi.util.zip.ZipFile.LOCTIM">
            <summary>
            Constant for ZIP file handling.
            </summary>
        </member>
        <member name="F:biz.ritter.javapi.util.zip.ZipFile.LOCCRC">
            <summary>
            Constant for ZIP file handling.
            </summary>
        </member>
        <member name="F:biz.ritter.javapi.util.zip.ZipFile.LOCSIZ">
            <summary>
            Constant for ZIP file handling.
            </summary>
        </member>
        <member name="F:biz.ritter.javapi.util.zip.ZipFile.LOCLEN">
            <summary>
            Constant for ZIP file handling.
            </summary>
        </member>
        <member name="F:biz.ritter.javapi.util.zip.ZipFile.LOCNAM">
            <summary>
            Constant for ZIP file handling.
            </summary>
        </member>
        <member name="F:biz.ritter.javapi.util.zip.ZipFile.LOCEXT">
            <summary>
            Constant for ZIP file handling.
            </summary>
        </member>
        <member name="F:biz.ritter.javapi.util.zip.ZipFile.EXTCRC">
            <summary>
            Constant for ZIP file handling.
            </summary>
        </member>
        <member name="F:biz.ritter.javapi.util.zip.ZipFile.EXTSIZ">
            <summary>
            Constant for ZIP file handling.
            </summary>
        </member>
        <member name="F:biz.ritter.javapi.util.zip.ZipFile.EXTLEN">
            <summary>
            Constant for ZIP file handling.
            </summary>
        </member>
        <member name="F:biz.ritter.javapi.util.zip.ZipFile.CENVEM">
            <summary>
            Constant for ZIP file handling.
            </summary>
        </member>
        <member name="F:biz.ritter.javapi.util.zip.ZipFile.CENVER">
            <summary>
            Constant for ZIP file handling.
            </summary>
        </member>
        <member name="F:biz.ritter.javapi.util.zip.ZipFile.CENFLG">
            <summary>
            Constant for ZIP file handling.
            </summary>
        </member>
        <member name="F:biz.ritter.javapi.util.zip.ZipFile.CENHOW">
            <summary>
            Constant for ZIP file handling.
            </summary>
        </member>
        <member name="F:biz.ritter.javapi.util.zip.ZipFile.CENTIM">
            <summary>
            Constant for ZIP file handling.
            </summary>
        </member>
        <member name="F:biz.ritter.javapi.util.zip.ZipFile.CENCRC">
            <summary>
            Constant for ZIP file handling.
            </summary>
        </member>
        <member name="F:biz.ritter.javapi.util.zip.ZipFile.CENSIZ">
            <summary>
            Constant for ZIP file handling.
            </summary>
        </member>
        <member name="F:biz.ritter.javapi.util.zip.ZipFile.CENLEN">
            <summary>
            Constant for ZIP file handling.
            </summary>
        </member>
        <member name="F:biz.ritter.javapi.util.zip.ZipFile.CENNAM">
            <summary>
            Constant for ZIP file handling.
            </summary>
        </member>
        <member name="F:biz.ritter.javapi.util.zip.ZipFile.CENEXT">
            <summary>
            Constant for ZIP file handling.
            </summary>
        </member>
        <member name="F:biz.ritter.javapi.util.zip.ZipFile.CENCOM">
            <summary>
            Constant for ZIP file handling.
            </summary>
        </member>
        <member name="F:biz.ritter.javapi.util.zip.ZipFile.CENDSK">
            <summary>
            Constant for ZIP file handling.
            </summary>
        </member>
        <member name="F:biz.ritter.javapi.util.zip.ZipFile.CENATT">
            <summary>
            Constant for ZIP file handling.
            </summary>
        </member>
        <member name="F:biz.ritter.javapi.util.zip.ZipFile.CENATX">
            <summary>
            Constant for ZIP file handling.
            </summary>
        </member>
        <member name="F:biz.ritter.javapi.util.zip.ZipFile.CENOFF">
            <summary>
            Constant for ZIP file handling.
            </summary>
        </member>
        <member name="F:biz.ritter.javapi.util.zip.ZipFile.ENDSUB">
            <summary>
            Constant for ZIP file handling.
            </summary>
        </member>
        <member name="F:biz.ritter.javapi.util.zip.ZipFile.ENDTOT">
            <summary>
            Constant for ZIP file handling.
            </summary>
        </member>
        <member name="F:biz.ritter.javapi.util.zip.ZipFile.ENDSIZ">
            <summary>
            Constant for ZIP file handling.
            </summary>
        </member>
        <member name="F:biz.ritter.javapi.util.zip.ZipFile.ENDOFF">
            <summary>
            Constant for ZIP file handling.
            </summary>
        </member>
        <member name="F:biz.ritter.javapi.util.zip.ZipFile.ENDCOM">
            <summary>
            Constant for ZIP file handling.
            </summary>
        </member>
        <member name="M:biz.ritter.javapi.util.zip.ZipFile.Finalize">
            <summary>
            Destruct instance.
            </summary>
        </member>
        <member name="M:biz.ritter.javapi.util.zip.ZipFile.finalize">
            <summary>
            Clean up instance
            </summary>
        </member>
        <member name="M:biz.ritter.javapi.util.Properties.setProperty(System.String,System.String)">
            <summary>
            Set the property value for name
            </summary>
            <param name="name">Name of property</param>
            <param name="value">Value of property called name</param>
            <returns>same as Hashtable.put(key,value)</returns>
            <see cref="!:biz.ritter.javapi.util.Hashtable.put(String,String)"/>
        </member>
        <member name="M:biz.ritter.javapi.util.Properties.#ctor(System.Collections.IDictionary)">
            <summary>
            Helpermethod for easier .net implementation
            </summary>
            <param name="defaultJ"></param>
        </member>
        <member name="M:biz.ritter.javapi.util.Arrays`1.copy(System.Int32[])">
            <summary>
            Copy an int[] values to a new int[].
            </summary>
            <param name="source"></param>
            <returns></returns>
            <author>Bastie</author>
        </member>
        <member name="M:biz.ritter.javapi.util.Arrays`1.copy(System.String[])">
            <summary>
            Copy an String[] values to a new String[].
            </summary>
            <param name="source"></param>
            <returns></returns>
            <author>Bastie</author>
        </member>
        <member name="M:biz.ritter.javapi.util.Arrays`1.getIndexArray(`0[0:,0:],System.Int32)">
            <summary>
            Creates an 1-dim-array. This includes all values / references of the indexed dim of [,] source.
            Implements the Java equivalent...
            <code>char [] zeroDim = (new char [][] {{'0','1','2','3','4','5'},{'A','B','C','D','E','F'}})[index];</code>
            </summary>
            <param name="source"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:biz.ritter.javapi.util.LinkedHashMap`2">
            <summary>
            LinkedHashMap implementation
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:biz.ritter.javapi.util.LinkedHashMap`2.#ctor">
            <summary>
            Create a new LinkedHashMap
            </summary>
        </member>
        <member name="M:biz.ritter.javapi.util.LinkedHashMap`2.#ctor(System.Int32,System.Single)">
            <summary>
            Create a new LinkedHashMap.
            </summary>
            <param name="initialCapacity"></param>
            <param name="ignoredLoadFactor">ignored</param>
        </member>
        <member name="T:biz.ritter.javapi.util.WeakHashMap`2">
            WeakHashMap is an implementation of Map with keys which are WeakReferences. A
            key/value mapping is removed when the key is no longer referenced. All
            optional operations (adding and removing) are supported. Keys and values can
            be any objects. Note that the garbage collector acts similar to a second
            thread on this collection, possibly removing keys.
            
            @since 1.2
            @see HashMap
            @see WeakReference
        </member>
        <member name="M:biz.ritter.javapi.util.WeakHashMap`2.#ctor">
            Constructs a new empty {@code WeakHashMap} instance.
        </member>
        <member name="M:biz.ritter.javapi.util.WeakHashMap`2.#ctor(System.Int32)">
            Constructs a new {@code WeakHashMap} instance with the specified
            capacity.
            
            @param capacity
                       the initial capacity of this map.
            @throws IllegalArgumentException
                           if the capacity is less than zero.
        </member>
        <member name="M:biz.ritter.javapi.util.WeakHashMap`2.#ctor(System.Int32,System.Single)">
            Constructs a new {@code WeakHashMap} instance with the specified capacity
            and load factor.
            
            @param capacity
                       the initial capacity of this map.
            @param loadFactor
                       the initial load factor.
            @throws IllegalArgumentException
                        if the capacity is less than zero or the load factor is less
                        or equal to zero.
        </member>
        <member name="M:biz.ritter.javapi.util.WeakHashMap`2.#ctor(biz.ritter.javapi.util.Map{`0,`1})">
            Constructs a new {@code WeakHashMap} instance containing the mappings
            from the specified map.
            
            @param map
                       the mappings to add.
        </member>
        <member name="M:biz.ritter.javapi.util.WeakHashMap`2.clear">
            Removes all mappings from this map, leaving it empty.
            
            @see #isEmpty()
            @see #size()
        </member>
        <member name="M:biz.ritter.javapi.util.WeakHashMap`2.containsKey(System.Object)">
            Returns whether this map contains the specified key.
            
            @param key
                       the key to search for.
            @return {@code true} if this map contains the specified key,
                    {@code false} otherwise.
        </member>
        <member name="M:biz.ritter.javapi.util.WeakHashMap`2.entrySet">
             Returns a set containing all of the mappings in this map. Each mapping is
             an instance of {@link Map.Entry}. As the set is backed by this map,
             changes in one will be reflected in the other. It does not support adding
             operations.
            
             @return a set of the mappings.
        </member>
        <member name="M:biz.ritter.javapi.util.WeakHashMap`2.keySet">
            Returns a set of the keys contained in this map. The set is backed by
            this map so changes to one are reflected by the other. The set does not
            support adding.
            
            @return a set of the keys.
        </member>
        <member name="M:biz.ritter.javapi.util.WeakHashMap`2.values">
            Returns a collection of the values contained in this map. The collection
            is backed by this map so changes to one are reflected by the other. The
            collection supports remove, removeAll, retainAll and clear operations,
            and it does not support add or addAll operations.
            <p/>
            This method returns a collection which is the subclass of
            AbstractCollection. The iterator method of this subclass returns a
            "wrapper object" over the iterator of map's entrySet(). The size method
            wraps the map's size method and the contains method wraps the map's
            containsValue method.
            <p/>
            The collection is created when this method is called at first time and
            returned in response to all subsequent calls. This method may return
            different Collection when multiple calls to this method, since it has no
            synchronization performed.
            
            @return a collection of the values contained in this map.
        </member>
        <member name="M:biz.ritter.javapi.util.WeakHashMap`2.get(System.Object)">
            Returns the value of the mapping with the specified key.
            
            @param key
                       the key.
            @return the value of the mapping with the specified key, or {@code null}
                    if no mapping for the specified key is found.
        </member>
        <member name="M:biz.ritter.javapi.util.WeakHashMap`2.containsValue(System.Object)">
            Returns whether this map contains the specified value.
            
            @param value
                       the value to search for.
            @return {@code true} if this map contains the specified value,
                    {@code false} otherwise.
        </member>
        <member name="M:biz.ritter.javapi.util.WeakHashMap`2.isEmpty">
            Returns the number of elements in this map.
            
            @return the number of elements in this map.
        </member>
        <member name="M:biz.ritter.javapi.util.WeakHashMap`2.put(`0,`1)">
            Maps the specified key to the specified value.
            
            @param key
                       the key.
            @param value
                       the value.
            @return the value of any previous mapping with the specified key or
                    {@code null} if there was no mapping.
        </member>
        <member name="M:biz.ritter.javapi.util.WeakHashMap`2.putAll(biz.ritter.javapi.util.Map{`0,`1})">
            Copies all the mappings in the given map to this map. These mappings will
            replace all mappings that this map had for any of the keys currently in
            the given map.
            
            @param map
                       the map to copy mappings from.
            @throws NullPointerException
                        if {@code map} is {@code null}.
        </member>
        <member name="M:biz.ritter.javapi.util.WeakHashMap`2.remove(System.Object)">
            Removes the mapping with the specified key from this map.
            
            @param key
                       the key of the mapping to remove.
            @return the value of the removed mapping or {@code null} if no mapping
                    for the specified key was found.
        </member>
        <member name="M:biz.ritter.javapi.util.WeakHashMap`2.size">
            Returns the number of elements in this map.
            
            @return the number of elements in this map.
        </member>
        <member name="T:biz.ritter.javapi.dotnet.util.wrapper.EnumeratorWrapper`1">
            <summary>
            This class take a .net IEnumerator instance inside and use this to delegate the
            java.util.Enumeration method calls.
            </summary>
            <typeparam name="K">Type to enumerate</typeparam>
        </member>
        <member name="T:biz.ritter.javapi.dotnet.util.wrapper.InputStreamWrapper">
            <summary>
            This utility class wrap a .net framework System.IO.Stream instance into a Java java.io.InputStream.
            </summary>
        </member>
        <member name="F:biz.ritter.javapi.dotnet.util.wrapper.InputStreamWrapper.delegateInstance">
            <summary>
            The base .net Stream instance
            </summary>
        </member>
        <member name="M:biz.ritter.javapi.dotnet.util.wrapper.InputStreamWrapper.#ctor(System.IO.Stream)">
            <summary>
            Construct new wrapper for given Stream instance
            </summary>
            <param name="dotNetStream">Stream to wrap</param>
        </member>
        <member name="T:biz.ritter.javapi.dotnet.util.wrapper.EnumerableIterator`1">
            <summary>
            This class wrapps the IEnumerator / IEnumerable / Enumeration above an Iterator instance. So foreach loop
            and default .net functionality can be used.
            </summary>
        </member>
        <member name="M:biz.ritter.javapi.dotnet.util.wrapper.EnumerableIterator`1.#ctor(biz.ritter.javapi.lang.Iterable{`0})">
            <summary>
            Create new instance for given Iterable object
            </summary>
            <param name="it"></param>
        </member>
        <member name="M:biz.ritter.javapi.dotnet.util.wrapper.EnumerableIterator`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Get the IEnumerator instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:biz.ritter.javapi.dotnet.util.wrapper.EnumerableIterator`1.GetEnumerator">
            <summary>
            Get the IEnemurator instance for this wrapped java.util.Iterator.
            </summary>
            <returns></returns>
        </member>
        <member name="M:biz.ritter.javapi.dotnet.lang.ConsoleErrorPrintStream.println(System.String)">
            <summary>
            Override the PrintStream implementation with Console specific implementation
            </summary>
            <param name="output"></param>
        </member>
        <member name="M:biz.ritter.javapi.dotnet.lang.ConsoleOutputPrintStream.println(System.String)">
            <summary>
            Override the PrintStream implementation with Console specific implementation
            </summary>
            <param name="output"></param>
        </member>
        <member name="M:biz.ritter.javapi.dotnet.lang.Operator.shiftRightUnsignet(System.Int64,System.Int32)">
            <summary>
            CSharp has no >>> operator. This method do same thing!
            </summary>
            <param name="value">value for shift operation</param>
            <param name="shift">shift operator</param>
            <returns>shifted value</returns>
        </member>
        <member name="M:biz.ritter.javapi.dotnet.lang.Operator.shiftRightUnsignet(System.UInt64,System.Int32)">
            <summary>
            CSharp has no >>> operator. This method do same thing!
            </summary>
            <param name="value">value for shift operation</param>
            <param name="shift">shift operator</param>
            <returns>shifted value</returns>
        </member>
        <member name="M:biz.ritter.javapi.dotnet.lang.Operator.shiftRightUnsignet(System.Int32,System.Int32)">
            <summary>
            CSharp has no >>> operator. This method do same thing!
            </summary>
            <param name="value">value for shift operation</param>
            <param name="shift">shift operator</param>
            <returns>shifted value</returns>
        </member>
        <member name="T:biz.ritter.javapi.math.BigInteger">
            <summary>
             This class represents immutable integer numbers of arbitrary length. Large
             numbers are typically used in security applications and therefore BigIntegers
             offer dedicated functionality like the generation of large prime numbers or
             the computation of modular inverse.
             <p/>
             Since the class was modeled to offer all the functionality as the {@link Integer}
             class does, it provides even methods that operate bitwise on a two's
             complement representation of large integers. Note however that the
             implementations favors an internal representation where magnitude and sign
             are treated separately. Hence such operations are inefficient and should be
             discouraged. In simple words: Do NOT implement any bit fields based on
             BigInteger.
            </summary>
        </member>
        <member name="F:biz.ritter.javapi.math.BigInteger.serialVersionUID">
            This is the serialVersionUID used by the sun implementation. */
        </member>
        <member name="F:biz.ritter.javapi.math.BigInteger.digits">
            
             The magnitude of this big integer. This array holds unsigned little
             endian digits. For example:
               {@code 13} is represented as [ 13 ]
               {@code -13} is represented as [ 13 ]
               {@code 2^32 + 13} is represented as [ 13, 1 ]
               {@code 2^64 + 13} is represented as [ 13, 0, 1 ]
               {@code 2^31} is represented as [ Integer.MIN_VALUE ]
             The magnitude array may be longer than strictly necessary, which results
             in additional trailing zeros.
            
        </member>
        <member name="F:biz.ritter.javapi.math.BigInteger.numberLength">
            The length of this in measured in ints. Can be less than digits.length(). */
        </member>
        <member name="F:biz.ritter.javapi.math.BigInteger.sign">
            The sign of this. */
        </member>
        <member name="F:biz.ritter.javapi.math.BigInteger.ZERO">
            
             The {@code BigInteger} constant 0.
            
        </member>
        <member name="F:biz.ritter.javapi.math.BigInteger.ONE">
            
             The {@code BigInteger} constant 1.
            
        </member>
        <member name="F:biz.ritter.javapi.math.BigInteger.TEN">
            
             The {@code BigInteger} constant 10.
            
        </member>
        <member name="F:biz.ritter.javapi.math.BigInteger.MINUS_ONE">
            The {@code BigInteger} constant -1. */
        </member>
        <member name="F:biz.ritter.javapi.math.BigInteger.EQUALS">
            The {@code BigInteger} constant 0 used for comparison. */
        </member>
        <member name="F:biz.ritter.javapi.math.BigInteger.GREATER">
            The {@code BigInteger} constant 1 used for comparison. */
        </member>
        <member name="F:biz.ritter.javapi.math.BigInteger.LESS">
            The {@code BigInteger} constant -1 used for comparison. */
        </member>
        <member name="F:biz.ritter.javapi.math.BigInteger.SMALL_VALUES">
            All the {@code BigInteger} numbers in the range [0,10] are cached. */
        </member>
        <member name="F:biz.ritter.javapi.math.BigInteger.signumJ">
            sign field, used for serialization. */
        </member>
        <member name="F:biz.ritter.javapi.math.BigInteger.magnitude">
            absolute value field, used for serialization */
        </member>
        <member name="F:biz.ritter.javapi.math.BigInteger.hashCode">
            Cache for the hash code. */
        </member>
        <member name="M:biz.ritter.javapi.math.BigInteger.#ctor(System.Int32,biz.ritter.javapi.util.Random)">
            <summary>
             Constructs a random non-negative {@code BigInteger} instance in the range
             [0, 2^(numBits)-1].
            
             @param numBits
                        maximum length of the new {@code BigInteger} in bits.
             @param rnd
                        is an optional random generator to be used.
             @throws IllegalArgumentException
                         if {@code numBits} &lt; 0.
            </summary>
        </member>
        <member name="M:biz.ritter.javapi.math.BigInteger.#ctor(System.Int32,System.Int32,biz.ritter.javapi.util.Random)">
            <summary>
             Constructs a random {@code BigInteger} instance in the range [0,
             2^(bitLength)-1] which is probably prime. The probability that the
             returned {@code BigInteger} is prime is beyond (1-1/2^certainty).
            
             @param bitLength
                        length of the new {@code BigInteger} in bits.
             @param certainty
                        tolerated primality uncertainty.
             @param rnd
                        is an optional random generator to be used.
             @throws ArithmeticException
                         if {@code bitLength} &lt; 2.
            </summary>
        </member>
        <member name="M:biz.ritter.javapi.math.BigInteger.#ctor(System.String)">
            <summary>
             Constructs a new {@code BigInteger} instance from the string
             representation. The string representation consists of an optional minus
             sign followed by a non-empty sequence of decimal digits.
            
             @param val
                        string representation of the new {@code BigInteger}.
             @throws NullPointerException
                         if {@code val == null}.
             @throws NumberFormatException
                         if {@code val} is not a valid representation of a {@code
                         BigInteger}.
            </summary>
        </member>
        <member name="M:biz.ritter.javapi.math.BigInteger.#ctor(System.String,System.Int32)">
            <summary>
             Constructs a new {@code BigInteger} instance from the string
             representation. The string representation consists of an optional minus
             sign followed by a non-empty sequence of digits in the specified radix.
             For the conversion the method {@code Character.digit(char, radix)} is
             used.
            
             @param val
                        string representation of the new {@code BigInteger}.
             @param radix
                        the base to be used for the conversion.
             @throws NullPointerException
                         if {@code val == null}.
             @throws NumberFormatException
                         if {@code val} is not a valid representation of a {@code
                         BigInteger} or if {@code radix &lt; Character.MIN_RADIX} or
                         {@code radix &gt; Character.MAX_RADIX}.
            </summary>
        </member>
        <member name="M:biz.ritter.javapi.math.BigInteger.#ctor(System.Int32,System.Byte[])">
            <summary>
             Constructs a new {@code BigInteger} instance with the given sign and the
             given magnitude. The sign is given as an integer (-1 for negative, 0 for
             zero, 1 for positive). The magnitude is specified as a byte array. The
             most significant byte is the entry at index 0.
            
             @param signum
                        sign of the new {@code BigInteger} (-1 for negative, 0 for
                        zero, 1 for positive).
             @param magnitude
                        magnitude of the new {@code BigInteger} with the most
                        significant byte first.
             @throws NullPointerException
                         if {@code magnitude == null}.
             @throws NumberFormatException
                         if the sign is not one of -1, 0, 1 or if the sign is zero and
                         the magnitude contains non-zero entries.
            </summary>
        </member>
        <member name="M:biz.ritter.javapi.math.BigInteger.#ctor(System.Byte[])">
            <summary>
             Constructs a new {@code BigInteger} from the given two's complement
             representation. The most significant byte is the entry at index 0. The
             most significant bit of this entry determines the sign of the new {@code
             BigInteger} instance. The given array must not be empty.
            
             @param val
                        two's complement representation of the new {@code BigInteger}.
             @throws NullPointerException
                         if {@code val == null}.
             @throws NumberFormatException
                         if the length of {@code val} is zero.
            </summary>
        </member>
        <member name="M:biz.ritter.javapi.math.BigInteger.#ctor(System.Int32,System.Int32)">
            <summary>
             Constructs a number which array is of size 1.
             
             @param sign
                        the sign of the number
             @param value
                        the only one digit of array
            </summary>
        </member>
        <member name="M:biz.ritter.javapi.math.BigInteger.#ctor(System.Int32,System.Int32,System.Int32[])">
            <summary>
             Constructs a number without to create new space. This construct should be
             used only if the three fields of representation are known.
             
             @param sign
                        the sign of the number
             @param numberLength
                        the length of the internal array
             @param digits
                        a reference of some array created before
            </summary>
        </member>
        <member name="M:biz.ritter.javapi.math.BigInteger.#ctor(System.Int32,System.Int64)">
            <summary>
             Creates a new {@code BigInteger} whose value is equal to the specified
             {@code long}.
             
             @param sign
                        the sign of the number
             @param val
                        the value of the new {@code BigInteger}.
            </summary>
        </member>
        <member name="M:biz.ritter.javapi.math.BigInteger.#ctor(System.Int32,System.Int32[])">
            <summary>
             Creates a new {@code BigInteger} with the given sign and magnitude. This
             constructor does not create a copy, so any changes to the reference will
             affect the new number.
             
             @param signum
                        The sign of the number represented by {@code digits}
             @param digits
                        The magnitude of the number
            </summary>
        </member>
        <member name="M:biz.ritter.javapi.math.BigInteger.toByteArray">
            
             Returns the two's complement representation of this BigInteger in a byte
             array.
            
             @return two's complement representation of {@code this}.
            
        </member>
        <member name="M:biz.ritter.javapi.math.BigInteger.setFromString(biz.ritter.javapi.math.BigInteger,System.String,System.Int32)">
            @see BigInteger#BigInteger(String, int) */
        </member>
        <member name="M:biz.ritter.javapi.math.BigInteger.abs">
            
             Returns a (new) {@code BigInteger} whose value is the absolute value of
             {@code this}.
            
             @return {@code abs(this)}.
            
        </member>
        <member name="M:biz.ritter.javapi.math.BigInteger.negate">
            
             Returns a new {@code BigInteger} whose value is the {@code -this}.
            
             @return {@code -this}.
            
        </member>
        <member name="M:biz.ritter.javapi.math.BigInteger.add(biz.ritter.javapi.math.BigInteger)">
            
             Returns a new {@code BigInteger} whose value is {@code this + val}.
            
             @param val
                        value to be added to {@code this}.
             @return {@code this + val}.
             @throws NullPointerException
                         if {@code val == null}.
            
        </member>
        <member name="M:biz.ritter.javapi.math.BigInteger.subtract(biz.ritter.javapi.math.BigInteger)">
            
             Returns a new {@code BigInteger} whose value is {@code this - val}.
            
             @param val
                        value to be subtracted from {@code this}.
             @return {@code this - val}.
             @throws NullPointerException
                         if {@code val == null}.
            
        </member>
        <member name="M:biz.ritter.javapi.math.BigInteger.signum">
            
             Returns the sign of this {@code BigInteger}.
            
             @return {@code -1} if {@code this &lt; 0},
                     {@code 0} if {@code this == 0},
                     {@code 1} if {@code this &gt; 0}.
            
        </member>
        <member name="M:biz.ritter.javapi.math.BigInteger.shiftRight(System.Int32)">
            
             Returns a new {@code BigInteger} whose value is {@code this >> n}. For
             negative arguments, the result is also negative. The shift distance may
             be negative which means that {@code this} is shifted left.
             <p/>
             <b>Implementation Note:</b> Usage of this method on negative values is
             not recommended as the current implementation is not efficient.
            
             @param n
                        shift distance
             @return {@code this &lt;&lt; n} if {@code n &gt;= 0}; {@code this &lt;&lt;s (-n)}
                     otherwise
            
        </member>
        <member name="M:biz.ritter.javapi.math.BigInteger.shiftLeft(System.Int32)">
            
             Returns a new {@code BigInteger} whose value is {@code this &gt;&gt; n}. The
             result is equivalent to {@code this * 2^n} if n &gt;= 0. The shift distance
             may be negative which means that {@code this} is shifted right. The
             result then corresponds to {@code floor(this / 2^(-n))}.
             <p/>
             <b>Implementation Note:</b> Usage of this method on negative values is
             not recommended as the current implementation is not efficient.
            
             @param n
                        shift distance.
             @return {@code this &lt;&lt; n} if {@code n &gt;= 0}; {@code this &gt;&gt; (-n)}.
                     otherwise
            
        </member>
        <member name="M:biz.ritter.javapi.math.BigInteger.bitLength">
            
             Returns the length of the value's two's complement representation without
             leading zeros for positive numbers / without leading ones for negative
             values.
             <p/>
             The two's complement representation of {@code this} will be at least
             {@code bitLength() + 1} bits long.
             <p/>
             The value will fit into an {@code int} if {@code bitLength() &lt; 32} or
             into a {@code long} if {@code bitLength() &lt; 64}.
            
             @return the length of the minimal two's complement representation for
                     {@code this} without the sign bit.
            
        </member>
        <member name="M:biz.ritter.javapi.math.BigInteger.testBit(System.Int32)">
            
             Tests whether the bit at position n in {@code this} is set. The result is
             equivalent to {@code this &amp; (2^n) != 0}.
             <p/>
             <b>Implementation Note:</b> Usage of this method is not recommended as
             the current implementation is not efficient.
            
             @param n
                        position where the bit in {@code this} has to be inspected.
             @return {@code this &amp; (2^n) != 0}.
             @throws ArithmeticException
                         if {@code n &lt; 0}.
            
        </member>
        <member name="M:biz.ritter.javapi.math.BigInteger.setBit(System.Int32)">
            
             Returns a new {@code BigInteger} which has the same binary representation
             as {@code this} but with the bit at position n set. The result is
             equivalent to {@code this | 2^n}.
             <p/>
             <b>Implementation Note:</b> Usage of this method is not recommended as
             the current implementation is not efficient.
            
             @param n
                        position where the bit in {@code this} has to be set.
             @return {@code this | 2^n}.
             @throws ArithmeticException
                         if {@code n &lt; 0}.
            
        </member>
        <member name="M:biz.ritter.javapi.math.BigInteger.clearBit(System.Int32)">
            
             Returns a new {@code BigInteger} which has the same binary representation
             as {@code this} but with the bit at position n cleared. The result is
             equivalent to {@code this &amp; ~(2^n)}.
             <p/>
             <b>Implementation Note:</b> Usage of this method is not recommended as
             the current implementation is not efficient.
            
             @param n
                        position where the bit in {@code this} has to be cleared.
             @return {@code this &amp; ~(2^n)}.
             @throws ArithmeticException
                         if {@code n &gt; 0}.
            
        </member>
        <member name="M:biz.ritter.javapi.math.BigInteger.flipBit(System.Int32)">
            
             Returns a new {@code BigInteger} which has the same binary representation
             as {@code this} but with the bit at position n flipped. The result is
             equivalent to {@code this ^ 2^n}.
             <p/>
             <b>Implementation Note:</b> Usage of this method is not recommended as
             the current implementation is not efficient.
            
             @param n
                        position where the bit in {@code this} has to be flipped.
             @return {@code this ^ 2^n}.
             @throws ArithmeticException
                         if {@code n &lt; 0}.
            
        </member>
        <member name="M:biz.ritter.javapi.math.BigInteger.getLowestSetBit">
            
             Returns the position of the lowest set bit in the two's complement
             representation of this {@code BigInteger}. If all bits are zero (this=0)
             then -1 is returned as result.
             <p/>
             <b>Implementation Note:</b> Usage of this method is not recommended as
             the current implementation is not efficient.
            
             @return position of lowest bit if {@code this != 0}, {@code -1} otherwise
            
        </member>
        <member name="M:biz.ritter.javapi.math.BigInteger.bitCount">
            
             Use {@code bitLength(0)} if you want to know the length of the binary
             value in bits.
             <p/>
             Returns the number of bits in the binary representation of {@code this}
             which differ from the sign bit. If {@code this} is positive the result is
             equivalent to the number of bits set in the binary representation of
             {@code this}. If {@code this} is negative the result is equivalent to the
             number of bits set in the binary representation of {@code -this-1}.
             <p/>
             <b>Implementation Note:</b> Usage of this method is not recommended as
             the current implementation is not efficient.
            
             @return number of bits in the binary representation of {@code this} which
                     differ from the sign bit
            
        </member>
        <member name="M:biz.ritter.javapi.math.BigInteger.not">
            
             Returns a new {@code BigInteger} whose value is {@code ~this}. The result
             of this operation is {@code -this-1}.
             <p/>
             <b>Implementation Note:</b> Usage of this method is not recommended as
             the current implementation is not efficient.
            
             @return {@code ~this}.
            
        </member>
        <member name="M:biz.ritter.javapi.math.BigInteger.and(biz.ritter.javapi.math.BigInteger)">
            
             Returns a new {@code BigInteger} whose value is {@code this &amp; val}.
             <p/>
             <b>Implementation Note:</b> Usage of this method is not recommended as
             the current implementation is not efficient.
            
             @param val
                        value to be and'ed with {@code this}.
             @return {@code this &amp; val}.
             @throws NullPointerException
                         if {@code val == null}.
            
        </member>
        <member name="M:biz.ritter.javapi.math.BigInteger.or(biz.ritter.javapi.math.BigInteger)">
            
             Returns a new {@code BigInteger} whose value is {@code this | val}.
             <p/>
             <b>Implementation Note:</b> Usage of this method is not recommended as
             the current implementation is not efficient.
            
             @param val
                        value to be or'ed with {@code this}.
             @return {@code this | val}.
             @throws NullPointerException
                         if {@code val == null}.
            
        </member>
        <member name="M:biz.ritter.javapi.math.BigInteger.xor(biz.ritter.javapi.math.BigInteger)">
            
             Returns a new {@code BigInteger} whose value is {@code this ^ val}.
             <p/>
             <b>Implementation Note:</b> Usage of this method is not recommended as
             the current implementation is not efficient.
            
             @param val
                        value to be xor'ed with {@code this}
             @return {@code this ^ val}
             @throws NullPointerException
                         if {@code val == null}
            
        </member>
        <member name="M:biz.ritter.javapi.math.BigInteger.andNot(biz.ritter.javapi.math.BigInteger)">
            
             Returns a new {@code BigInteger} whose value is {@code this &amp; ~val}.
             Evaluating {@code x.andNot(val)} returns the same result as {@code
             x.and(val.not())}.
             <p/>
             <b>Implementation Note:</b> Usage of this method is not recommended as
             the current implementation is not efficient.
            
             @param val
                        value to be not'ed and then and'ed with {@code this}.
             @return {@code this &amp; ~val}.
             @throws NullPointerException
                         if {@code val == null}.
            
        </member>
        <member name="M:biz.ritter.javapi.math.BigInteger.intValue">
            
             Returns this {@code BigInteger} as an int value. If {@code this} is too
             big to be represented as an int, then {@code this} % 2^32 is returned.
            
             @return this {@code BigInteger} as an int value.
            
        </member>
        <member name="M:biz.ritter.javapi.math.BigInteger.longValue">
            
             Returns this {@code BigInteger} as an long value. If {@code this} is too
             big to be represented as an long, then {@code this} % 2^64 is returned.
            
             @return this {@code BigInteger} as a long value.
            
        </member>
        <member name="M:biz.ritter.javapi.math.BigInteger.floatValue">
            
             Returns this {@code BigInteger} as an float value. If {@code this} is too
             big to be represented as an float, then {@code Float.POSITIVE_INFINITY}
             or {@code Float.NEGATIVE_INFINITY} is returned. Note, that not all
             integers x in the range [-Float.MAX_VALUE, Float.MAX_VALUE] can be
             represented as a float. The float representation has a mantissa of length
             24. For example, 2^24+1 = 16777217 is returned as float 16777216.0.
            
             @return this {@code BigInteger} as a float value.
            
        </member>
        <member name="M:biz.ritter.javapi.math.BigInteger.doubleValue">
            
             Returns this {@code BigInteger} as an double value. If {@code this} is
             too big to be represented as an double, then {@code
             Double.POSITIVE_INFINITY} or {@code Double.NEGATIVE_INFINITY} is
             returned. Note, that not all integers x in the range [-Double.MAX_VALUE,
             Double.MAX_VALUE] can be represented as a double. The double
             representation has a mantissa of length 53. For example, 2^53+1 =
             9007199254740993 is returned as double 9007199254740992.0.
            
             @return this {@code BigInteger} as a double value
            
        </member>
        <member name="M:biz.ritter.javapi.math.BigInteger.compareTo(biz.ritter.javapi.math.BigInteger)">
            
             Compares this {@code BigInteger} with {@code val}. Returns one of the
             three values 1, 0, or -1.
            
             @param val
                        value to be compared with {@code this}.
             @return {@code 1} if {@code this &gt; val}, {@code -1} if {@code this &lt; val}
                     , {@code 0} if {@code this == val}.
             @throws NullPointerException
                         if {@code val == null}.
            
        </member>
        <member name="M:biz.ritter.javapi.math.BigInteger.min(biz.ritter.javapi.math.BigInteger)">
            
             Returns the minimum of this {@code BigInteger} and {@code val}.
            
             @param val
                        value to be used to compute the minimum with {@code this}.
             @return {@code min(this, val)}.
             @throws NullPointerException
                         if {@code val == null}.
            
        </member>
        <member name="M:biz.ritter.javapi.math.BigInteger.max(biz.ritter.javapi.math.BigInteger)">
            
             Returns the maximum of this {@code BigInteger} and {@code val}.
            
             @param val
                        value to be used to compute the maximum with {@code this}
             @return {@code max(this, val)}
             @throws NullPointerException
                         if {@code val == null}
            
        </member>
        <member name="M:biz.ritter.javapi.math.BigInteger.GetHashCode">
            
             Returns a hash code for this {@code BigInteger}.
            
             @return hash code for {@code this}.
            
        </member>
        <member name="M:biz.ritter.javapi.math.BigInteger.Equals(System.Object)">
            
             Returns {@code true} if {@code x} is a BigInteger instance and if this
             instance is equal to this {@code BigInteger}.
            
             @param x
                        object to be compared with {@code this}.
             @return true if {@code x} is a BigInteger and {@code this == x},
                      {@code false} otherwise.
            
        </member>
        <member name="M:biz.ritter.javapi.math.BigInteger.ToString">
            
             Returns a string representation of this {@code BigInteger} in decimal
             form.
            
             @return a string representation of {@code this} in decimal form.
            
        </member>
        <member name="M:biz.ritter.javapi.math.BigInteger.toString(System.Int32)">
            
             Returns a string containing a string representation of this {@code
             BigInteger} with base radix. If {@code radix &lt; Character.MIN_RADIX} or
             {@code radix > Character.MAX_RADIX} then a decimal representation is
             returned. The characters of the string representation are generated with
             method {@code Character.forDigit}.
            
             @param radix
                        base to be used for the string representation.
             @return a string representation of this with radix 10.
            
        </member>
        <member name="M:biz.ritter.javapi.math.BigInteger.gcd(biz.ritter.javapi.math.BigInteger)">
            
             Returns a new {@code BigInteger} whose value is greatest common divisor
             of {@code this} and {@code val}. If {@code this==0} and {@code val==0}
             then zero is returned, otherwise the result is positive.
            
             @param val
                        value with which the greatest common divisor is computed.
             @return {@code gcd(this, val)}.
             @throws NullPointerException
                         if {@code val == null}.
            
        </member>
        <member name="M:biz.ritter.javapi.math.BigInteger.multiply(biz.ritter.javapi.math.BigInteger)">
            
             Returns a new {@code BigInteger} whose value is {@code this * val}.
            
             @param val
                        value to be multiplied with {@code this}.
             @return {@code this * val}.
             @throws NullPointerException
                         if {@code val == null}.
            
        </member>
        <member name="M:biz.ritter.javapi.math.BigInteger.pow(System.Int32)">
            
             Returns a new {@code BigInteger} whose value is {@code this ^ exp}.
            
             @param exp
                        exponent to which {@code this} is raised.
             @return {@code this ^ exp}.
             @throws ArithmeticException
                         if {@code exp &lt; 0}.
            
        </member>
        <member name="M:biz.ritter.javapi.math.BigInteger.divideAndRemainder(biz.ritter.javapi.math.BigInteger)">
            
             Returns a {@code BigInteger} array which contains {@code this / divisor}
             at index 0 and {@code this % divisor} at index 1.
            
             @param divisor
                        value by which {@code this} is divided.
             @return {@code [this / divisor, this % divisor]}.
             @throws NullPointerException
                         if {@code divisor == null}.
             @throws ArithmeticException
                         if {@code divisor == 0}.
             @see #divide
             @see #remainder
            
        </member>
        <member name="M:biz.ritter.javapi.math.BigInteger.divide(biz.ritter.javapi.math.BigInteger)">
            
             Returns a new {@code BigInteger} whose value is {@code this / divisor}.
            
             @param divisor
                        value by which {@code this} is divided.
             @return {@code this / divisor}.
             @throws NullPointerException
                         if {@code divisor == null}.
             @throws ArithmeticException
                         if {@code divisor == 0}.
            
        </member>
        <member name="M:biz.ritter.javapi.math.BigInteger.remainder(biz.ritter.javapi.math.BigInteger)">
            
             Returns a new {@code BigInteger} whose value is {@code this % divisor}.
             Regarding signs this methods has the same behavior as the % operator on
             int's, i.e. the sign of the remainder is the same as the sign of this.
            
             @param divisor
                        value by which {@code this} is divided.
             @return {@code this % divisor}.
             @throws NullPointerException
                         if {@code divisor == null}.
             @throws ArithmeticException
                         if {@code divisor == 0}.
            
        </member>
        <member name="M:biz.ritter.javapi.math.BigInteger.modInverse(biz.ritter.javapi.math.BigInteger)">
            
             Returns a new {@code BigInteger} whose value is {@code 1/this mod m}. The
             modulus {@code m} must be positive. The result is guaranteed to be in the
             interval {@code [0, m)} (0 inclusive, m exclusive). If {@code this} is
             not relatively prime to m, then an exception is thrown.
            
             @param m
                        the modulus.
             @return {@code 1/this mod m}.
             @throws NullPointerException
                         if {@code m == null}
             @throws ArithmeticException
                         if {@code m &lt; 0 or} if {@code this} is not relatively prime
                         to {@code m}
            
        </member>
        <member name="M:biz.ritter.javapi.math.BigInteger.modPow(biz.ritter.javapi.math.BigInteger,biz.ritter.javapi.math.BigInteger)">
            
             Returns a new {@code BigInteger} whose value is {@code this^exponent mod
             m}. The modulus {@code m} must be positive. The result is guaranteed to
             be in the interval {@code [0, m)} (0 inclusive, m exclusive). If the
             exponent is negative, then {@code this.modInverse(m)^(-exponent) mod m)}
             is computed. The inverse of this only exists if {@code this} is
             relatively prime to m, otherwise an exception is thrown.
            
             @param exponent
                        the exponent.
             @param m
                        the modulus.
             @return {@code this^exponent mod val}.
             @throws NullPointerException
                         if {@code m == null} or {@code exponent == null}.
             @throws ArithmeticException
                         if {@code m &lt; 0} or if {@code exponent&lt;0} and this is not
                         relatively prime to {@code m}.
            
        </member>
        <member name="M:biz.ritter.javapi.math.BigInteger.mod(biz.ritter.javapi.math.BigInteger)">
            
             Returns a new {@code BigInteger} whose value is {@code this mod m}. The
             modulus {@code m} must be positive. The result is guaranteed to be in the
             interval {@code [0, m)} (0 inclusive, m exclusive). The behavior of this
             function is not equivalent to the behavior of the % operator defined for
             the built-in {@code int}'s.
            
             @param m
                        the modulus.
             @return {@code this mod m}.
             @throws NullPointerException
                         if {@code m == null}.
             @throws ArithmeticException
                         if {@code m &lt; 0}.
            
        </member>
        <member name="M:biz.ritter.javapi.math.BigInteger.isProbablePrime(System.Int32)">
            
             Tests whether this {@code BigInteger} is probably prime. If {@code true}
             is returned, then this is prime with a probability beyond
             (1-1/2^certainty). If {@code false} is returned, then this is definitely
             composite. If the argument {@code certainty} &lt;= 0, then this method
             returns true.
            
             @param certainty
                        tolerated primality uncertainty.
             @return {@code true}, if {@code this} is probably prime, {@code false}
                     otherwise.
            
        </member>
        <member name="M:biz.ritter.javapi.math.BigInteger.nextProbablePrime">
            
             Returns the smallest integer x &gt; {@code this} which is probably prime as
             a {@code BigInteger} instance. The probability that the returned {@code
             BigInteger} is prime is beyond (1-1/2^80).
            
             @return smallest integer &gt; {@code this} which is robably prime.
             @throws ArithmeticException
                         if {@code this &lt; 0}.
            
        </member>
        <member name="M:biz.ritter.javapi.math.BigInteger.probablePrime(System.Int32,biz.ritter.javapi.util.Random)">
            
             Returns a random positive {@code BigInteger} instance in the range [0,
             2^(bitLength)-1] which is probably prime. The probability that the
             returned {@code BigInteger} is prime is beyond (1-1/2^80).
             <p/>
             <b>Implementation Note:</b> Currently {@code rnd} is ignored.
            
             @param bitLength
                        length of the new {@code BigInteger} in bits.
             @param rnd
                        random generator used to generate the new {@code BigInteger}.
             @return probably prime random {@code BigInteger} instance.
             @throws IllegalArgumentException
                         if {@code bitLength &lt; 2}.
            
        </member>
        <member name="M:biz.ritter.javapi.math.BigInteger.cutOffLeadingZeroes">
            Decreases {@code numberLength} if there are zero high elements. */
        </member>
        <member name="M:biz.ritter.javapi.math.BigInteger.isOne">
            Tests if {@code this.abs()} is equals to {@code ONE} */
        </member>
        <member name="M:biz.ritter.javapi.math.BigInteger.putBytesPositiveToIntegers(System.Byte[])">
            
             Puts a big-endian byte array into a little-endian int array.
            
        </member>
        <member name="M:biz.ritter.javapi.math.BigInteger.putBytesNegativeToIntegers(System.Byte[])">
            
             Puts a big-endian byte array into a little-endian applying two
             complement.
            
        </member>
        <member name="M:biz.ritter.javapi.math.BigInteger.copy">
            
             Returns a copy of the current instance to achieve immutability
            
        </member>
        <member name="F:biz.ritter.javapi.math.RoundingMode.UNNECESSARY">
            <summary>
            Rounding mode where the rounding operations throws an ArithmeticException
            for the case that rounding is necessary, i.e. for the case that the value
            cannot be represented exactly.
            </summary>
        </member>
        <member name="M:biz.ritter.javapi.nio.charset.Charset.getCharsetFromBuiltInProvider(System.String)">
            <summary>
            Check charset name for build in implementation
            </summary>
            <param name="charsetName"></param>
            <returns></returns>
        </member>
        <member name="M:biz.ritter.javapi.nio.charset.Charset.encode(biz.ritter.javapi.nio.CharBuffer)">
            <summary>
            <para>
            Encodes the content of the give character buffer and outputs to a byte
            buffer that is to be returned.
            </para>
            <para>The default action in case of encoding errors is <c>CodingErrorAction.REPLACE</c>.</para>
            </summary>
            <param name="buffer">the character buffer containing the content to be encoded.</param>
            <returns>the result of the encoding.</returns>
        </member>
        <member name="M:biz.ritter.javapi.nio.charset.Charset.encode(System.String)">
            <summary>
            <para>Encodes a string and outputs to a byte buffer that is to be returned.</para>
            <para>The default action in case of encoding errors is <c>CodingErrorAction.REPLACE</c>.</para>
            </summary>
            <param name="s">the string to be encoded.</param>
            <returns>the result of the encoding.</returns>
        </member>
        <member name="M:biz.ritter.javapi.nio.charset.CharsetEncoder.canEncode(System.String)">
            <summary>
            Helper method for System.String instances wrapping
            </summary>
            <param name="sequence"></param>
            <returns></returns>
        </member>
        <member name="T:biz.ritter.javapi.nio.charset.CoderResult">
            <summary>
            Used to indicate the result of encoding/decoding. There are four types of
            results:
            <para>UNDERFLOW indicates that all input has been processed but more input is
            required. It is represented by the unique object <code>CoderResult.UNDERFLOW</code>.</para>
            <para>OVERFLOW indicates an insufficient output buffer size. It is represented
            by the unique object <code>CoderResult.OVERFLOW</code>.
            </para>
            <para>A malformed-input error indicates that an unrecognizable sequence of
            input units has been encountered. Get an instance of this type of result by
            calling <code>CoderResult.malformedForLength(int)</code> with the length of
            the malformed-input.
            </para>
            <para>An unmappable-character error indicates that a sequence of input units
            can not be mapped to the output charset. Get an instance of this type of
            result by calling <code>CoderResult.unmappableForLength(int)</code> with
            the input sequence size indicating the identity of the unmappable character.
            </para>
            </summary>
        </member>
        <member name="F:biz.ritter.javapi.nio.charset.CoderResult.UNDERFLOW">
            <summary>
            Result object indicating that there is insufficient data in the
            encoding/decoding buffer or that additional data is required.
            </summary>
        </member>
        <member name="F:biz.ritter.javapi.nio.charset.CoderResult.OVERFLOW">
            <summary>
            Result object used to indicate that the output buffer does not have
            enough space available to store the result of the encoding/decoding.
            </summary>
        </member>
        <member name="T:biz.ritter.javapi.nio.Buffer">
            <remarks>Class is ported from Apache Harmony project.</remarks>
        </member>
        <member name="F:biz.ritter.javapi.nio.Buffer.capacityJ">
            <summary>
            The capacity of this buffer, which never change. 
            </summary>
        </member>
        <member name="F:biz.ritter.javapi.nio.Buffer.positionJ">
            <summary>
            The current position of this buffer. Position is always no less than zero
            and no greater than <code>limit</code>.
            </summary>
        </member>
        <member name="M:biz.ritter.javapi.nio.Buffer.remaining">
            <summary>
            Returns the number of remaining elements in this buffer, that is
            <c>limit - position</c>.
            </summary>
            <returns>the number of remaining elements in this buffer.</returns>
        </member>
        <member name="F:biz.ritter.javapi.nio.channels.FileChannel.delegateInstance">
            <summary>
            <para>
            Creating FileChannel instance over input stream returning an unique FileChannel object
            associated with this FileInputStream. The position in this Channel qill be equal to the
            number of bytes readed from file. Reading bytes from FileInputStream will also
            increment the position in this Channel. Also changing position in Channel changing
            position fin FileInputStream.
            </para>
            <para>
            Working over same delegate System.IO.FileStream object is the way to make this true.
            </para>
            </summary>
        </member>
        <member name="M:biz.ritter.javapi.nio.channels.FileChannel.releaseFileLock(System.Int64,System.Int64)">
            <summary>
            Internal method calling from FileLock instance to release lock.
            </summary>
            <param name="pos">Position.</param>
            <param name="length">Length.</param>
        </member>
        <member name="T:biz.ritter.javapi.nio.BufferFactory">
            <summary>
            Provide factory service of buffer classes.
            <p>
            Since all buffer impl classes are package private (except DirectByteBuffer),
            this factory is the only entrance to access buffer functions from outside of
            the impl package.
            </p>
            </summary>
            <remarks>Class is ported from Apache Harmony project.</remarks>
        </member>
        <member name="M:biz.ritter.javapi.nio.BufferFactory.newByteBuffer(System.Byte[])">
            <summary>
            Returns a new byte buffer based on the specified byte array.
            
            @param array
                       The byte array
            @return A new byte buffer based on the specified byte array.
            </summary>
        </member>
        <member name="M:biz.ritter.javapi.nio.BufferFactory.newByteBuffer(System.Int32)">
            <summary>
            Returns a new array based byte buffer with the specified capacity.
            
            @param capacity
                       The capacity of the new buffer
            @return A new array based byte buffer with the specified capacity.
            </summary>
        </member>
        <member name="M:biz.ritter.javapi.nio.BufferFactory.newCharBuffer(System.Char[])">
            <summary>
            Returns a new char buffer based on the specified char array.
            
            @param array
                       The char array
            @return A new char buffer based on the specified char array.
            </summary>
        </member>
        <member name="M:biz.ritter.javapi.nio.BufferFactory.newCharBuffer(biz.ritter.javapi.lang.CharSequence)">
            <summary>
            Returns a new readonly char buffer based on the specified char sequence.
            
            @param chseq
                       The char sequence
            @return A new readonly char buffer based on the specified char sequence.
            </summary>
        </member>
        <member name="M:biz.ritter.javapi.nio.BufferFactory.newCharBuffer(System.Int32)">
            <summary>
            Returns a new array based char buffer with the specified capacity.
            
            @param capacity
                       The capacity of the new buffer
            @return A new array based char buffer with the specified capacity.
            </summary>
        </member>
        <member name="T:biz.ritter.javapi.nio.BufferOverflowException">
            <summary>
            A <code>BufferOverflowException</code> is thrown when elements are written
            to a buffer but there is not enough remaining space in the buffer.
            </summary>
            <remarks>Class is ported from Apache Harmony project.</remarks>
        </member>
        <member name="M:biz.ritter.javapi.nio.BufferOverflowException.#ctor">
            <summary>
            Constructs a <code>BufferOverflowException</code>.
            </summary>
        </member>
        <member name="T:biz.ritter.javapi.nio.ByteBuffer">
            <remarks>Class is ported from Apache Harmony project.</remarks>
        </member>
        <member name="T:biz.ritter.javapi.nio.ByteOrder">
            <remarks>Class is ported from Apache Harmony project.</remarks>
        </member>
        <member name="M:biz.ritter.javapi.nio.CharBuffer.wrap(System.String)">
            <summary>
            Internal helper method to wrap .net String in CharBuffer
            </summary>
            <param name="s">System.String instance</param>
            <returns>CharBuffer instance</returns>
        </member>
        <member name="T:biz.ritter.javapi.nio.HeapByteBuffer">
            <summary>
            HeapByteBuffer, ReadWriteHeapByteBuffer and ReadOnlyHeapByteBuffer compose
            the implementation of array based byte buffers.
            <p>
            HeapByteBuffer implements all the shared readonly methods and is extended by
            the other two classes.
            </p>
            <p>
            All methods are marked final for runtime performance.
            </p>
            
            </summary>
            <remarks>Class is ported from Apache Harmony project.</remarks>
        </member>
        <member name="T:biz.ritter.javapi.nio.InvalidMarkException">
            <remarks>Class is ported from Apache Harmony project.</remarks>
        </member>
        <member name="T:biz.ritter.javapi.nio.ReadWriteHeapByteBuffer">
            <summary>
            HeapByteBuffer, ReadWriteHeapByteBuffer and ReadOnlyHeapByteBuffer compose
            the implementation of array based byte buffers.
            <p>
            ReadWriteHeapByteBuffer extends HeapByteBuffer with all the write methods.
            </p>
            <p>
            This class is marked final for runtime performance.
            </p>
            
            </summary>
            <remarks>Class is ported from Apache Harmony project.</remarks>
        </member>
        <member name="M:biz.ritter.javapi.MessageFormatConverter.convert(System.String)">
            <summary>
            Convert formatted Java Message to formatted C# Message
            </summary>
            <para>
            <strong>Java:</strong> <code>%[argument_index$][flags][width][.precision]conversion</code><br />
            <strong>C#:</strong> <code>{index[,alignment][:formatString]}</code>
            </para>
            <para>
            <strong>Java:</strong> <code>"The %s costs $%.2f for %d months.%n", "studio", 499.0, 3</code><br />
            <strong>C#:</strong> <code>"The {0} costs {1:C} for {2} months.\n", "studio", 499.0, 3</code> 
            </para>
            <para>
            <strong>Java:</strong> <code>"Today is %tD%n", new java.util.Date()</code><br />
            <strong>C#:</strong> <code>"Today is " + DateTime.Now.ToShortDateString()</code>
            </para>
            <param name="msg">Message.</param>
        </member>
        <member name="F:biz.ritter.javapix.xml.crypto.dsig.TransformConstants.BASE64">
            <summary>
            The <a href="http://www.w3.org/2000/09/xmldsig#base64">Base64</a> transform algorithm URI.
            </summary>
        </member>
        <member name="F:biz.ritter.javapix.xml.crypto.dsig.TransformConstants.ENVELOPED">
             <summary>
             The <a href="http://www.w3.org/2000/09/xmldsig#enveloped-signature">
             Enveloped Signature</a> transform algorithm URI.
            </summary>
        </member>
        <member name="F:biz.ritter.javapix.xml.crypto.dsig.TransformConstants.XPATH">
            <summary>
            The <a href="http://www.w3.org/TR/1999/REC-xpath-19991116">XPath</a> 
            transform algorithm URI.
            </summary>
        </member>
        <member name="F:biz.ritter.javapix.xml.crypto.dsig.TransformConstants.XPATH2">
            <summary>
            The <a href="http://www.w3.org/2002/06/xmldsig-filter2">
            XPath Filter 2</a> transform algorithm URI.
            </summary>
        </member>
        <member name="F:biz.ritter.javapix.xml.crypto.dsig.TransformConstants.XSLT">
            <summary>
            The <a href="http://www.w3.org/TR/1999/REC-xslt-19991116">XSLT</a> 
            transform algorithm URI.
            </summary>
        </member>
        <member name="F:biz.ritter.javapix.xml.crypto.dsig.XMLSignatureConstants.XMLNS">
            <summary>
            The XML Namespace URI of the W3C Recommendation for XML-Signature Syntax and Processing.
            </summary>
        </member>
        <member name="F:biz.ritter.javapix.xml.crypto.dsig.SignatureMethodConstants.DSA_SHA1">
            <summary>
            The <a href="http://www.w3.org/2000/09/xmldsig#dsa-sha1">DSAwithSHA1</a>
            (DSS) signature method algorithm URI.
            </summary>
        </member>
        <member name="F:biz.ritter.javapix.xml.crypto.dsig.SignatureMethodConstants.RSA_SHA1">
            <summary>
            The <a href="http://www.w3.org/2000/09/xmldsig#rsa-sha1">RSAwithSHA1</a>
            (PKCS #1) signature method algorithm URI.
            </summary>
        </member>
        <member name="F:biz.ritter.javapix.xml.crypto.dsig.SignatureMethodConstants.HMAC_SHA1">
            <summary>
            The <a href="http://www.w3.org/2000/09/xmldsig#hmac-sha1">HMAC-SHA1</a>
            MAC signature method algorithm URI 
            </summary>
        </member>
        <member name="F:biz.ritter.javapix.xml.crypto.dsig.CanonicalizationMethodeConstants.INCLUSIVE">
            <summary>
            The <a href="http://www.w3.org/TR/2001/REC-xml-c14n-20010315">Canonical 
            XML (without comments)</a> canonicalization method algorithm URI.
            </summary>
        </member>
        <member name="F:biz.ritter.javapix.xml.crypto.dsig.CanonicalizationMethodeConstants.INCLUSIVE_WITH_COMMENTS">
            <summary>
            The 
            <a href="http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments">
            Canonical XML with comments</a> canonicalization method algorithm URI.
            </summary>
        </member>
        <member name="F:biz.ritter.javapix.xml.crypto.dsig.CanonicalizationMethodeConstants.EXCLUSIVE">
            <summary>
            The <a href="http://www.w3.org/2001/10/xml-exc-c14n#">Exclusive 
            Canonical XML (without comments)</a> canonicalization method algorithm
            URI.
            </summary>
        </member>
        <member name="F:biz.ritter.javapix.xml.crypto.dsig.CanonicalizationMethodeConstants.EXCLUSIVE_WITH_COMMENTS">
            <summary>
            The <a href="http://www.w3.org/2001/10/xml-exc-c14n#WithComments">
            Exclusive Canonical XML with comments</a> canonicalization method 
            algorithm URI.
            </summary>
        </member>
        <member name="T:Kajabity.Tools.Java.JavaPropertyReader">
            <summary>
            This class reads Java style properties from an input stream.  
            </summary>
        </member>
        <member name="M:Kajabity.Tools.Java.JavaPropertyReader.#ctor(biz.ritter.javapi.util.Properties)">
            <summary>
            Construct a reader passing a reference to a Hashtable (or JavaProperties) instance
            where the keys are to be stored.
            </summary>
            <param name="properties">A reference to a hashtable where the key-value pairs can be stored.</param>
        </member>
        <member name="M:Kajabity.Tools.Java.JavaPropertyReader.Parse(biz.ritter.javapi.io.Reader)">
            <summary>
            <para>Load key value pairs (properties) from an input Stream expected to have ISO-8859-1 encoding (code page 28592).  
            The input stream (usually reading from a ".properties" file) consists of a series of lines (terminated 
            by \r, \n or \r\n) each a key value pair, a comment or a blank line.</para>
            
            <para>Leading whitespace (spaces, tabs, formfeeds) are ignored at the start of any line - and a line that is empty or 
            contains only whitespace is blank and ignored.</para>
            
            <para>A line with the first non-whitespace character is a '#' or '!' is a comment line and the rest of the line is 
            ignored.</para>
            
            <para>If the first non-whitespace character is not '#' or '!' then it is the start of a key.  A key is all the
            characters up to the first whitespace or a key/value separator - '=' or ':'.</para>
            
            <para>The separator is optional.  Any whitespace after the key or after the separator (if present) is ignored.</para>
            
            <para>The first non-whitespace character after the separator (or after the key if no separator) begins the value.  
            The value may include whitespace, separators, or comment characters.</para>
            
            <para>Any unicode character may be included in either key or value by using escapes preceded by the escape 
            character '\'.</para>
            
            <para>The following special cases are defined:</para>
            <code>
            	'\t' - horizontal tab.
            	'\f' - form feed.
            	'\r' - return
            	'\n' - new line
            	'\\' - add escape character.
            
            	'\ ' - add space in a key or at the start of a value.
            	'\!', '\#' - add comment markers at the start of a key.
            	'\=', '\:' - add a separator in a key.
            </code>
            
            <para>Any unicode character using the following escape:</para>
            <code>
            	'\uXXXX' - where XXXX represents the unicode character code as 4 hexadecimal digits.
            </code>
            
            <para>Finally, longer lines can be broken by putting an escape at the very end of the line.  Any leading space
            (unless escaped) is skipped at the beginning of the following line.</para>
            
            Examples
            <code>
            	a-key = a-value
            	a-key : a-value
            	a-key=a-value
            	a-key a-value
            </code>
            
            <para>All the above will result in the same key/value pair - key "a-key" and value "a-value".</para>
            <code>
            	! comment...
            	# another comment...
            </code>
            
            <para>The above are two examples of comments.</para>
            <code>
            	Honk\ Kong = Near China
            </code>
            
            <para>The above shows how to embed a space in a key - key is "Hong Kong", value is "Near China".</para>
            <code>
            	a-longer-key-example = a really long value that is \
            			split over two lines.
            </code>
            
            <para>An example of a long line split into two.</para>
            </summary>
            <param name="stream">The input stream that the properties are read from.</param>
        </member>
        <member name="T:Kajabity.Tools.Java.JavaPropertyWriter">
            <summary>
            Use this class for writing a set of key value pair strings to an 
            output stream using the Java properties format.
            </summary>
        </member>
        <member name="M:Kajabity.Tools.Java.JavaPropertyWriter.#ctor(biz.ritter.javapi.util.Properties)">
            <summary>
            Construct an instance of this class.
            </summary>
            <param name="hashtable">The Hashtable (or JavaProperties) instance 
            whose values are to be written.</param>
        </member>
        <member name="M:Kajabity.Tools.Java.JavaPropertyWriter.Write(biz.ritter.javapi.io.Writer,System.String)">
            <summary>
            Write the properties to the output stream.
            </summary>
            <param name="stream">The output stream where the properties are written.</param>
            <param name="comments">Optional comments that are placed at the beginning of the output.</param>
        </member>
        <member name="M:Kajabity.Tools.Java.JavaPropertyWriter.escapeKey(System.String)">
            <summary>
            Escape the string as a Key with character set ISO-8859-1 -
            the characters 0-127 are US-ASCII and we will escape any others.  The passed string is Unicode which extends
            ISO-8859-1 - so all is well.
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="T:org.apache.harmony.awt.Utils">
            <summary>
            Helper class
            <remarks>JavApi implementation without PrivilegeAction, so direct using of java.lang.SystemJ is no bad idea...</remarks>
            </summary>
        </member>
        <member name="T:org.w3c.dom.NodeConstants">
            <summary>
            Helper class include Constants for interface org.w3c.dom.Node
            </summary>
        </member>
        <member name="M:System.JavaExtensions.matches(System.String,System.String)">
            <summary>
            Check string instance for matching giving regular expression.
            </summary>
            <param name="str">instance</param>
            <param name="expr">regular expression</param>
            <returns></returns>
        </member>
        <member name="M:System.JavaExtensions.getWrapperInstance(System.String)">
            <summary>
            Helper method to create a Java like String wrapper object instance. You can use this wrapper if
            implemented interface like java.lang.Appendable is needed.
            </summary>
            <param name="str">base .net String instance or null</param>
            <returns>Wrapper for given String instance</returns>
        </member>
        <member name="M:System.JavaExtensions.lastIndexOf(System.String,System.Char,System.Int32)">
            <summary>
            Identify the last index of char - Java like.
            </summary>
            <param name="str"></param>
            <param name="c"></param>
            <param name="startIndex"></param>
            <returns></returns>
        </member>
        <member name="M:System.JavaExtensions.getBytes(System.String)">
            <summary>
            Extends System.String
            Encodes this {@code String} into a sequence of bytes using the
            platform's default charset, storing the result into a new byte array.
            </summary>
            <param name="str"></param>
            <returns>The resultant byte array</returns>
        </member>
        <member name="M:System.JavaExtensions.getBytes(System.String,System.String)">
            <summary>
            Extends System.String
            Encodes this {@code String} into a sequence of bytes using the named
            charset, storing the result into a new byte array.
            
            </summary>
            <exception cref="T:biz.ritter.javapi.io.UnsupportedEncodingException">If the named charset is not supported</exception>
            <param name="str"></param>
            <param name="charsetName"></param>
            <returns></returns>
        </member>
        <member name="M:System.JavaExtensions.getResource(System.Object,System.String)">
            <summary>
            All Java classes can get resources over method java.net.URL java.lang.Class.getResource();
            </summary>
            <param name="t">an instance</param>
            <param name="name">named resource</param>
            <returns></returns>
        </member>
        <member name="M:System.JavaExtensions.toInt(System.DayOfWeek)">
            <summary>
            Convert enumeration value to int valie based on 
            </summary>
            <param name="dayOfWeek">enum value of System.DayOfWeek</param>
            <returns>Sunday == 1, Monday == 2, ...</returns>
            <see cref="T:System.DayOfWeek"/>
        </member>
        <member name="M:System.JavaExtensions.getTime(System.DateTime)">
            <summary>
            Returns milliseconds since 01.01.1970
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
    </members>
</doc>
